
CS122A_FINAL_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000226  00800100  000010e6  0000117a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  00800326  00800326  000013a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001be3  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b21  00000000  00000000  00003113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cb9  00000000  00000000  00003c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000048f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075d  00000000  00000000  00004bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092a  00000000  00000000  00005329  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
       2:	00 00       	nop
       4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
       6:	00 00       	nop
       8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
       a:	00 00       	nop
       c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
       e:	00 00       	nop
      10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
      12:	00 00       	nop
      14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
      16:	00 00       	nop
      18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b1 c0       	rjmp	.+354    	; 0x184 <__bad_interrupt>
      22:	00 00       	nop
      24:	af c0       	rjmp	.+350    	; 0x184 <__bad_interrupt>
      26:	00 00       	nop
      28:	ad c0       	rjmp	.+346    	; 0x184 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ab c0       	rjmp	.+342    	; 0x184 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a9 c0       	rjmp	.+338    	; 0x184 <__bad_interrupt>
      32:	00 00       	nop
      34:	58 c1       	rjmp	.+688    	; 0x2e6 <__vector_13>
      36:	00 00       	nop
      38:	a5 c0       	rjmp	.+330    	; 0x184 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a3 c0       	rjmp	.+326    	; 0x184 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a1 c0       	rjmp	.+322    	; 0x184 <__bad_interrupt>
      42:	00 00       	nop
      44:	9f c0       	rjmp	.+318    	; 0x184 <__bad_interrupt>
      46:	00 00       	nop
      48:	9d c0       	rjmp	.+314    	; 0x184 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9b c0       	rjmp	.+310    	; 0x184 <__bad_interrupt>
      4e:	00 00       	nop
      50:	99 c0       	rjmp	.+306    	; 0x184 <__bad_interrupt>
      52:	00 00       	nop
      54:	97 c0       	rjmp	.+302    	; 0x184 <__bad_interrupt>
      56:	00 00       	nop
      58:	95 c0       	rjmp	.+298    	; 0x184 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	93 c0       	rjmp	.+294    	; 0x184 <__bad_interrupt>
      5e:	00 00       	nop
      60:	91 c0       	rjmp	.+290    	; 0x184 <__bad_interrupt>
      62:	00 00       	nop
      64:	8f c0       	rjmp	.+286    	; 0x184 <__bad_interrupt>
      66:	00 00       	nop
      68:	8d c0       	rjmp	.+282    	; 0x184 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8b c0       	rjmp	.+278    	; 0x184 <__bad_interrupt>
      6e:	00 00       	nop
      70:	89 c0       	rjmp	.+274    	; 0x184 <__bad_interrupt>
      72:	00 00       	nop
      74:	87 c0       	rjmp	.+270    	; 0x184 <__bad_interrupt>
      76:	00 00       	nop
      78:	85 c0       	rjmp	.+266    	; 0x184 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	83 c0       	rjmp	.+262    	; 0x184 <__bad_interrupt>
      7e:	00 00       	nop
      80:	81 c0       	rjmp	.+258    	; 0x184 <__bad_interrupt>
      82:	00 00       	nop
      84:	7f c0       	rjmp	.+254    	; 0x184 <__bad_interrupt>
      86:	00 00       	nop
      88:	7d c0       	rjmp	.+250    	; 0x184 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	93 03       	fmuls	r17, r19
      8e:	ce 03       	fmulsu	r20, r22
      90:	d5 03       	fmuls	r21, r21
      92:	48 04       	cpc	r4, r8
      94:	48 04       	cpc	r4, r8
      96:	d9 03       	fmulsu	r21, r17
      98:	e5 03       	fmuls	r22, r21
      9a:	f0 03       	fmuls	r23, r16
      9c:	4b 04       	cpc	r4, r11
      9e:	14 04       	cpc	r1, r4
      a0:	24 04       	cpc	r2, r4
      a2:	30 04       	cpc	r3, r0
      a4:	3c 04       	cpc	r3, r12
      a6:	a9 03       	fmulsu	r18, r17
      a8:	b6 03       	fmuls	r19, r22
      aa:	57 04       	cpc	r5, r7
      ac:	5f 04       	cpc	r5, r15
      ae:	64 04       	cpc	r6, r4
      b0:	81 04       	cpc	r8, r1
      b2:	89 04       	cpc	r8, r9
      b4:	6e 04       	cpc	r6, r14
      b6:	70 04       	cpc	r7, r0
      b8:	78 04       	cpc	r7, r8
      ba:	cd 04       	cpc	r12, r13
      bc:	93 04       	cpc	r9, r3
      be:	a0 04       	cpc	r10, r0
      c0:	9b 04       	cpc	r9, r11
      c2:	a5 04       	cpc	r10, r5
      c4:	aa 04       	cpc	r10, r10
      c6:	b2 04       	cpc	r11, r2
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <Tick+0x264>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	d0 e4       	ldi	r29, 0x40	; 64
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	13 e0       	ldi	r17, 0x03	; 3
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	e6 ee       	ldi	r30, 0xE6	; 230
     15e:	f0 e1       	ldi	r31, 0x10	; 16
     160:	00 e0       	ldi	r16, 0x00	; 0
     162:	0b bf       	out	0x3b, r16	; 59
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x14>
     166:	07 90       	elpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a6 32       	cpi	r26, 0x26	; 38
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0x10>

00000170 <__do_clear_bss>:
     170:	23 e0       	ldi	r18, 0x03	; 3
     172:	a6 e2       	ldi	r26, 0x26	; 38
     174:	b3 e0       	ldi	r27, 0x03	; 3
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a3 38       	cpi	r26, 0x83	; 131
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0d d4       	rcall	.+2074   	; 0x99c <main>
     182:	af c7       	rjmp	.+3934   	; 0x10e2 <_exit>

00000184 <__bad_interrupt>:
     184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <initUSART>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	81 f0       	breq	.+32     	; 0x1aa <initUSART+0x24>
     18a:	e1 ec       	ldi	r30, 0xC1	; 193
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	88 61       	ori	r24, 0x18	; 24
     192:	80 83       	st	Z, r24
     194:	e2 ec       	ldi	r30, 0xC2	; 194
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	86 60       	ori	r24, 0x06	; 6
     19c:	80 83       	st	Z, r24
     19e:	83 e3       	ldi	r24, 0x33	; 51
     1a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     1a4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     1a8:	08 95       	ret
     1aa:	e9 ec       	ldi	r30, 0xC9	; 201
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	88 61       	ori	r24, 0x18	; 24
     1b2:	80 83       	st	Z, r24
     1b4:	ea ec       	ldi	r30, 0xCA	; 202
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	86 60       	ori	r24, 0x06	; 6
     1bc:	80 83       	st	Z, r24
     1be:	83 e3       	ldi	r24, 0x33	; 51
     1c0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     1c4:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     1c8:	08 95       	ret

000001ca <USART_Receive>:
     1ca:	81 30       	cpi	r24, 0x01	; 1
     1cc:	41 f0       	breq	.+16     	; 0x1de <USART_Receive+0x14>
     1ce:	e0 ec       	ldi	r30, 0xC0	; 192
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	88 23       	and	r24, r24
     1d6:	ec f7       	brge	.-6      	; 0x1d2 <USART_Receive+0x8>
     1d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     1dc:	08 95       	ret
     1de:	e8 ec       	ldi	r30, 0xC8	; 200
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	88 23       	and	r24, r24
     1e6:	ec f7       	brge	.-6      	; 0x1e2 <USART_Receive+0x18>
     1e8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     1ec:	08 95       	ret

000001ee <delay_ms>:
     1ee:	18 16       	cp	r1, r24
     1f0:	19 06       	cpc	r1, r25
     1f2:	5c f0       	brlt	.+22     	; 0x20a <delay_ms+0x1c>
     1f4:	08 95       	ret
     1f6:	00 00       	nop
     1f8:	21 50       	subi	r18, 0x01	; 1
     1fa:	31 09       	sbc	r19, r1
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <delay_ms+0x8>
     1fe:	4f 5f       	subi	r20, 0xFF	; 255
     200:	5f 4f       	sbci	r21, 0xFF	; 255
     202:	84 17       	cp	r24, r20
     204:	95 07       	cpc	r25, r21
     206:	19 f4       	brne	.+6      	; 0x20e <delay_ms+0x20>
     208:	08 95       	ret
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	27 e0       	ldi	r18, 0x07	; 7
     210:	33 e0       	ldi	r19, 0x03	; 3
     212:	f1 cf       	rjmp	.-30     	; 0x1f6 <delay_ms+0x8>

00000214 <LCD_WriteCommand>:
     214:	2e 98       	cbi	0x05, 6	; 5
     216:	88 b9       	out	0x08, r24	; 8
     218:	2f 9a       	sbi	0x05, 7	; 5
     21a:	00 00       	nop
     21c:	2f 98       	cbi	0x05, 7	; 5
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	e5 cf       	rjmp	.-54     	; 0x1ee <delay_ms>
     224:	08 95       	ret

00000226 <LCD_ClearScreen>:
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	f5 cf       	rjmp	.-22     	; 0x214 <LCD_WriteCommand>
     22a:	08 95       	ret

0000022c <LCD_init>:
     22c:	84 e6       	ldi	r24, 0x64	; 100
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	de df       	rcall	.-68     	; 0x1ee <delay_ms>
     232:	88 e3       	ldi	r24, 0x38	; 56
     234:	ef df       	rcall	.-34     	; 0x214 <LCD_WriteCommand>
     236:	86 e0       	ldi	r24, 0x06	; 6
     238:	ed df       	rcall	.-38     	; 0x214 <LCD_WriteCommand>
     23a:	8f e0       	ldi	r24, 0x0F	; 15
     23c:	eb df       	rcall	.-42     	; 0x214 <LCD_WriteCommand>
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	e9 df       	rcall	.-46     	; 0x214 <LCD_WriteCommand>
     242:	8a e0       	ldi	r24, 0x0A	; 10
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	d3 cf       	rjmp	.-90     	; 0x1ee <delay_ms>
     248:	08 95       	ret

0000024a <LCD_WriteData>:
     24a:	2e 9a       	sbi	0x05, 6	; 5
     24c:	88 b9       	out	0x08, r24	; 8
     24e:	2f 9a       	sbi	0x05, 7	; 5
     250:	00 00       	nop
     252:	2f 98       	cbi	0x05, 7	; 5
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	ca cf       	rjmp	.-108    	; 0x1ee <delay_ms>
     25a:	08 95       	ret

0000025c <LCD_Cursor>:
     25c:	81 31       	cpi	r24, 0x11	; 17
     25e:	18 f4       	brcc	.+6      	; 0x266 <LCD_Cursor+0xa>
     260:	81 58       	subi	r24, 0x81	; 129
     262:	d8 cf       	rjmp	.-80     	; 0x214 <LCD_WriteCommand>
     264:	08 95       	ret
     266:	81 55       	subi	r24, 0x51	; 81
     268:	d5 cf       	rjmp	.-86     	; 0x214 <LCD_WriteCommand>
     26a:	08 95       	ret

0000026c <LCD_DisplayString>:
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	18 2f       	mov	r17, r24
     276:	eb 01       	movw	r28, r22
     278:	d6 df       	rcall	.-84     	; 0x226 <LCD_ClearScreen>
     27a:	88 81       	ld	r24, Y
     27c:	88 23       	and	r24, r24
     27e:	51 f0       	breq	.+20     	; 0x294 <LCD_DisplayString+0x28>
     280:	01 e0       	ldi	r16, 0x01	; 1
     282:	01 0f       	add	r16, r17
     284:	81 2f       	mov	r24, r17
     286:	ea df       	rcall	.-44     	; 0x25c <LCD_Cursor>
     288:	89 91       	ld	r24, Y+
     28a:	df df       	rcall	.-66     	; 0x24a <LCD_WriteData>
     28c:	10 2f       	mov	r17, r16
     28e:	88 81       	ld	r24, Y
     290:	81 11       	cpse	r24, r1
     292:	f6 cf       	rjmp	.-20     	; 0x280 <LCD_DisplayString+0x14>
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	08 95       	ret

0000029e <TimerOn>:
     29e:	8b e0       	ldi	r24, 0x0B	; 11
     2a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     2a4:	8d e7       	ldi	r24, 0x7D	; 125
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     2ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     2b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     2ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     2be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     2c6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     2ca:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     2ce:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <_avr_timer_cntcurr>
     2d2:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <_avr_timer_cntcurr+0x1>
     2d6:	a0 93 2d 03 	sts	0x032D, r26	; 0x80032d <_avr_timer_cntcurr+0x2>
     2da:	b0 93 2e 03 	sts	0x032E, r27	; 0x80032e <_avr_timer_cntcurr+0x3>
     2de:	8f b7       	in	r24, 0x3f	; 63
     2e0:	80 68       	ori	r24, 0x80	; 128
     2e2:	8f bf       	out	0x3f, r24	; 63
     2e4:	08 95       	ret

000002e6 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
     2e6:	1f 92       	push	r1
     2e8:	0f 92       	push	r0
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	0f 92       	push	r0
     2ee:	11 24       	eor	r1, r1
     2f0:	8f 93       	push	r24
     2f2:	9f 93       	push	r25
     2f4:	af 93       	push	r26
     2f6:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
     2f8:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <_avr_timer_cntcurr>
     2fc:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <_avr_timer_cntcurr+0x1>
     300:	a0 91 2d 03 	lds	r26, 0x032D	; 0x80032d <_avr_timer_cntcurr+0x2>
     304:	b0 91 2e 03 	lds	r27, 0x032E	; 0x80032e <_avr_timer_cntcurr+0x3>
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <_avr_timer_cntcurr>
     312:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <_avr_timer_cntcurr+0x1>
     316:	a0 93 2d 03 	sts	0x032D, r26	; 0x80032d <_avr_timer_cntcurr+0x2>
     31a:	b0 93 2e 03 	sts	0x032E, r27	; 0x80032e <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
     31e:	89 2b       	or	r24, r25
     320:	8a 2b       	or	r24, r26
     322:	8b 2b       	or	r24, r27
     324:	99 f4       	brne	.+38     	; 0x34c <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
     32c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     330:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     334:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     338:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     33c:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <_avr_timer_cntcurr>
     340:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <_avr_timer_cntcurr+0x1>
     344:	a0 93 2d 03 	sts	0x032D, r26	; 0x80032d <_avr_timer_cntcurr+0x2>
     348:	b0 93 2e 03 	sts	0x032E, r27	; 0x80032e <_avr_timer_cntcurr+0x3>
	}
}
     34c:	bf 91       	pop	r27
     34e:	af 91       	pop	r26
     350:	9f 91       	pop	r25
     352:	8f 91       	pop	r24
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     35e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     362:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     366:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     36a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
     36e:	60 93 2b 03 	sts	0x032B, r22	; 0x80032b <_avr_timer_cntcurr>
     372:	70 93 2c 03 	sts	0x032C, r23	; 0x80032c <_avr_timer_cntcurr+0x1>
     376:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <_avr_timer_cntcurr+0x2>
     37a:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <_avr_timer_cntcurr+0x3>
     37e:	08 95       	ret

00000380 <reverse>:
//http://www.geeksforgeeks.org/convert-floating-point-number-string/
// Converts a floating point number to string.
// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
     380:	9b 01       	movw	r18, r22
     382:	21 50       	subi	r18, 0x01	; 1
     384:	31 09       	sbc	r19, r1
	while (i<j)
     386:	12 16       	cp	r1, r18
     388:	13 06       	cpc	r1, r19
     38a:	84 f4       	brge	.+32     	; 0x3ac <reverse+0x2c>
     38c:	fc 01       	movw	r30, r24
     38e:	e6 0f       	add	r30, r22
     390:	f7 1f       	adc	r31, r23
     392:	dc 01       	movw	r26, r24
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp = str[i];
     398:	4c 91       	ld	r20, X
		str[i] = str[j];
     39a:	52 91       	ld	r21, -Z
     39c:	5d 93       	st	X+, r21
		str[j] = temp;
     39e:	40 83       	st	Z, r20
		i++; j--;
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	21 50       	subi	r18, 0x01	; 1
     3a4:	31 09       	sbc	r19, r1
// Converts a floating point number to string.
// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
	while (i<j)
     3a6:	82 17       	cp	r24, r18
     3a8:	93 07       	cpc	r25, r19
     3aa:	b4 f3       	brlt	.-20     	; 0x398 <reverse+0x18>
     3ac:	08 95       	ret

000003ae <intToStr>:
//http://www.geeksforgeeks.org/convert-floating-point-number-string/
// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
     3ae:	cf 92       	push	r12
     3b0:	df 92       	push	r13
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	6b 01       	movw	r12, r22
     3c0:	8a 01       	movw	r16, r20
	int i = 0;
	while (x)
     3c2:	00 97       	sbiw	r24, 0x00	; 0
     3c4:	91 f0       	breq	.+36     	; 0x3ea <intToStr+0x3c>
     3c6:	eb 01       	movw	r28, r22
     3c8:	e0 e0       	ldi	r30, 0x00	; 0
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
	{
		str[i++] = (x%10) + '0';
     3cc:	0f 2e       	mov	r0, r31
     3ce:	fa e0       	ldi	r31, 0x0A	; 10
     3d0:	ef 2e       	mov	r14, r31
     3d2:	f1 2c       	mov	r15, r1
     3d4:	f0 2d       	mov	r31, r0
     3d6:	31 96       	adiw	r30, 0x01	; 1
     3d8:	b7 01       	movw	r22, r14
     3da:	53 d6       	rcall	.+3238   	; 0x1082 <__divmodhi4>
     3dc:	80 5d       	subi	r24, 0xD0	; 208
     3de:	89 93       	st	Y+, r24
		x = x/10;
     3e0:	86 2f       	mov	r24, r22
     3e2:	97 2f       	mov	r25, r23
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
     3e4:	00 97       	sbiw	r24, 0x00	; 0
     3e6:	b9 f7       	brne	.-18     	; 0x3d6 <intToStr+0x28>
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <intToStr+0x40>
// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
     3ea:	e0 e0       	ldi	r30, 0x00	; 0
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     3ee:	e0 17       	cp	r30, r16
     3f0:	f1 07       	cpc	r31, r17
     3f2:	5c f4       	brge	.+22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f4:	ec 0d       	add	r30, r12
     3f6:	fd 1d       	adc	r31, r13
     3f8:	96 01       	movw	r18, r12
     3fa:	20 0f       	add	r18, r16
     3fc:	31 1f       	adc	r19, r17
	str[i++] = '0';
     3fe:	80 e3       	ldi	r24, 0x30	; 48
     400:	81 93       	st	Z+, r24
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     402:	e2 17       	cp	r30, r18
     404:	f3 07       	cpc	r31, r19
     406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
     408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	8f 01       	movw	r16, r30
	str[i++] = '0';
	
	reverse(str, i);
     40c:	b8 01       	movw	r22, r16
     40e:	c6 01       	movw	r24, r12
     410:	b7 df       	rcall	.-146    	; 0x380 <reverse>
	str[i] = '\0';
     412:	e6 01       	movw	r28, r12
     414:	c0 0f       	add	r28, r16
     416:	d1 1f       	adc	r29, r17
     418:	18 82       	st	Y, r1
	return i;
}
     41a:	c8 01       	movw	r24, r16
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	08 95       	ret

0000042e <ftoa>:
//http://www.geeksforgeeks.org/convert-floating-point-number-string/
// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
     42e:	2f 92       	push	r2
     430:	3f 92       	push	r3
     432:	4f 92       	push	r4
     434:	5f 92       	push	r5
     436:	6f 92       	push	r6
     438:	7f 92       	push	r7
     43a:	8f 92       	push	r8
     43c:	9f 92       	push	r9
     43e:	af 92       	push	r10
     440:	bf 92       	push	r11
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	4b 01       	movw	r8, r22
     454:	5c 01       	movw	r10, r24
     456:	8a 01       	movw	r16, r20
	// Extract integer part
	int ipart = (int)n;
     458:	e9 01       	movw	r28, r18
     45a:	8c d3       	rcall	.+1816   	; 0xb74 <__fixsfsi>
     45c:	6b 01       	movw	r12, r22
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
     45e:	7c 01       	movw	r14, r24
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	b8 01       	movw	r22, r16
     466:	c6 01       	movw	r24, r12
     468:	a2 df       	rcall	.-188    	; 0x3ae <intToStr>
	
	// check for display option after point
	if (afterpoint != 0)
     46a:	1c 01       	movw	r2, r24
     46c:	20 97       	sbiw	r28, 0x00	; 0
	{
		res[i] = '.';  // add dot
     46e:	61 f1       	breq	.+88     	; 0x4c8 <ftoa+0x9a>
     470:	f8 01       	movw	r30, r16
     472:	e8 0f       	add	r30, r24
     474:	f9 1f       	adc	r31, r25
     476:	8e e2       	ldi	r24, 0x2E	; 46
		
		// Get the value of fraction part up to given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     478:	80 83       	st	Z, r24
     47a:	be 01       	movw	r22, r28
     47c:	0d 2e       	mov	r0, r29
     47e:	00 0c       	add	r0, r0
     480:	88 0b       	sbc	r24, r24
     482:	99 0b       	sbc	r25, r25
     484:	aa d3       	rcall	.+1876   	; 0xbda <__floatsisf>
     486:	9b 01       	movw	r18, r22
     488:	ac 01       	movw	r20, r24
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	80 e2       	ldi	r24, 0x20	; 32
     490:	91 e4       	ldi	r25, 0x41	; 65
     492:	92 d4       	rcall	.+2340   	; 0xdb8 <pow>
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
     494:	2b 01       	movw	r4, r22
     496:	3c 01       	movw	r6, r24
     498:	b6 01       	movw	r22, r12
     49a:	dd 0c       	add	r13, r13
     49c:	88 0b       	sbc	r24, r24
     49e:	99 0b       	sbc	r25, r25
     4a0:	9c d3       	rcall	.+1848   	; 0xbda <__floatsisf>
     4a2:	9b 01       	movw	r18, r22
     4a4:	ac 01       	movw	r20, r24
     4a6:	c5 01       	movw	r24, r10
		// Get the value of fraction part up to given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     4a8:	b4 01       	movw	r22, r8
     4aa:	97 d2       	rcall	.+1326   	; 0x9da <__subsf3>
     4ac:	2f ef       	ldi	r18, 0xFF	; 255
     4ae:	22 1a       	sub	r2, r18
     4b0:	32 0a       	sbc	r3, r18
     4b2:	02 0d       	add	r16, r2
     4b4:	13 1d       	adc	r17, r3
     4b6:	a3 01       	movw	r20, r6
     4b8:	92 01       	movw	r18, r4
     4ba:	1b d4       	rcall	.+2102   	; 0xcf2 <__mulsf3>
     4bc:	5b d3       	rcall	.+1718   	; 0xb74 <__fixsfsi>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	ae 01       	movw	r20, r28
	}
}
     4c4:	b8 01       	movw	r22, r16
     4c6:	73 df       	rcall	.-282    	; 0x3ae <intToStr>
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	cf 90       	pop	r12
     4d8:	bf 90       	pop	r11
     4da:	af 90       	pop	r10
     4dc:	9f 90       	pop	r9
     4de:	8f 90       	pop	r8
     4e0:	7f 90       	pop	r7
     4e2:	6f 90       	pop	r6
     4e4:	5f 90       	pop	r5
     4e6:	4f 90       	pop	r4
     4e8:	3f 90       	pop	r3
     4ea:	2f 90       	pop	r2
     4ec:	08 95       	ret

000004ee <ADC_init>:
//ADC MUX SELECTOR

void ADC_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     4ee:	80 e4       	ldi	r24, 0x40	; 64
     4f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     4f4:	87 e8       	ldi	r24, 0x87	; 135
     4f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     4fa:	08 95       	ret

000004fc <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     4fc:	ec e7       	ldi	r30, 0x7C	; 124
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	90 81       	ld	r25, Z
     502:	98 7f       	andi	r25, 0xF8	; 248
     504:	87 70       	andi	r24, 0x07	; 7
     506:	89 2b       	or	r24, r25
     508:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     50a:	ea e7       	ldi	r30, 0x7A	; 122
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	80 81       	ld	r24, Z
     510:	80 64       	ori	r24, 0x40	; 64
     512:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     514:	80 81       	ld	r24, Z
     516:	86 fd       	sbrc	r24, 6
     518:	fd cf       	rjmp	.-6      	; 0x514 <adc_read+0x18>
	
	return (ADC);
     51a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     51e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     522:	08 95       	ret

00000524 <Current_Sampler>:
float avg = 0.0;
char res2[20];
char res3[20];
void Current_Sampler()
{
	LCD_DisplayString(1,"Current Now");
     524:	64 e0       	ldi	r22, 0x04	; 4
     526:	71 e0       	ldi	r23, 0x01	; 1
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	a0 de       	rcall	.-704    	; 0x26c <LCD_DisplayString>
	delay_ms(1000);
     52c:	88 ee       	ldi	r24, 0xE8	; 232
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	5e de       	rcall	.-836    	; 0x1ee <delay_ms>
	}
	avg = y/30;
	
	curent_voltage_in = (530- avg) * 45 / 1024;;		//10 amp rating
	*/
	curent_voltage_in = temp/200;
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	48 e4       	ldi	r20, 0x48	; 72
     538:	53 e4       	ldi	r21, 0x43	; 67
     53a:	60 91 4e 03 	lds	r22, 0x034E	; 0x80034e <temp>
     53e:	70 91 4f 03 	lds	r23, 0x034F	; 0x80034f <temp+0x1>
     542:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <temp+0x2>
     546:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <temp+0x3>
     54a:	ac d2       	rcall	.+1368   	; 0xaa4 <__divsf3>
     54c:	60 93 34 03 	sts	0x0334, r22	; 0x800334 <curent_voltage_in>
     550:	70 93 35 03 	sts	0x0335, r23	; 0x800335 <curent_voltage_in+0x1>
     554:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <curent_voltage_in+0x2>
     558:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <curent_voltage_in+0x3>
	ftoa ((curent_voltage_in),res2,2);
     55c:	22 e0       	ldi	r18, 0x02	; 2
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	48 e3       	ldi	r20, 0x38	; 56
     562:	53 e0       	ldi	r21, 0x03	; 3
	
	LCD_DisplayString(1,res2);
     564:	64 df       	rcall	.-312    	; 0x42e <ftoa>
     566:	68 e3       	ldi	r22, 0x38	; 56
     568:	73 e0       	ldi	r23, 0x03	; 3
     56a:	81 e0       	ldi	r24, 0x01	; 1
	delay_ms(5000);
     56c:	7f de       	rcall	.-770    	; 0x26c <LCD_DisplayString>
     56e:	88 e8       	ldi	r24, 0x88	; 136
     570:	93 e1       	ldi	r25, 0x13	; 19
     572:	3d ce       	rjmp	.-902    	; 0x1ee <delay_ms>
     574:	08 95       	ret

00000576 <Voltage_Sampler>:
float temp;
char res[20];

void Voltage_Sampler()
{
	LCD_DisplayString(1,"Voltage Now");
     576:	60 e1       	ldi	r22, 0x10	; 16
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	77 de       	rcall	.-786    	; 0x26c <LCD_DisplayString>
	delay_ms(1000);
     57e:	88 ee       	ldi	r24, 0xE8	; 232
     580:	93 e0       	ldi	r25, 0x03	; 3
	adc_result0 = adc_read(0);      // read adc value at PA0
     582:	35 de       	rcall	.-918    	; 0x1ee <delay_ms>
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	ba df       	rcall	.-140    	; 0x4fc <adc_read>
     588:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <adc_result0+0x1>
     58c:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <adc_result0>
	x = adc_result0;									//Samples and outputs the voltages;
     590:	bc 01       	movw	r22, r24
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	1f d3       	rcall	.+1598   	; 0xbd6 <__floatunsisf>
     598:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <x>
     59c:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <x+0x1>
     5a0:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <x+0x2>
	volts = x * (5.0/1023.0);
	volts= volts *2;
     5a4:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <x+0x3>
     5a8:	2a e0       	ldi	r18, 0x0A	; 10
     5aa:	38 e2       	ldi	r19, 0x28	; 40
     5ac:	40 ea       	ldi	r20, 0xA0	; 160
     5ae:	5b e3       	ldi	r21, 0x3B	; 59
     5b0:	a0 d3       	rcall	.+1856   	; 0xcf2 <__mulsf3>
     5b2:	9b 01       	movw	r18, r22
     5b4:	ac 01       	movw	r20, r24
     5b6:	12 d2       	rcall	.+1060   	; 0x9dc <__addsf3>
     5b8:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <volts>
     5bc:	70 93 69 03 	sts	0x0369, r23	; 0x800369 <volts+0x1>
     5c0:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <volts+0x2>
	temp = volts;
     5c4:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <volts+0x3>
     5c8:	60 93 4e 03 	sts	0x034E, r22	; 0x80034e <temp>
     5cc:	70 93 4f 03 	sts	0x034F, r23	; 0x80034f <temp+0x1>
     5d0:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <temp+0x2>
	ftoa((volts),res, 2);
     5d4:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <temp+0x3>
	
	
	LCD_DisplayString(1, res);
     5d8:	22 e0       	ldi	r18, 0x02	; 2
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	4c e6       	ldi	r20, 0x6C	; 108
     5de:	53 e0       	ldi	r21, 0x03	; 3
	delay_ms(2000);
     5e0:	26 df       	rcall	.-436    	; 0x42e <ftoa>
     5e2:	6c e6       	ldi	r22, 0x6C	; 108
     5e4:	73 e0       	ldi	r23, 0x03	; 3
     5e6:	81 e0       	ldi	r24, 0x01	; 1
	Current_Sampler();
     5e8:	41 de       	rcall	.-894    	; 0x26c <LCD_DisplayString>
     5ea:	80 ed       	ldi	r24, 0xD0	; 208
     5ec:	97 e0       	ldi	r25, 0x07	; 7
     5ee:	ff dd       	rcall	.-1026   	; 0x1ee <delay_ms>
     5f0:	99 cf       	rjmp	.-206    	; 0x524 <Current_Sampler>
     5f2:	08 95       	ret

000005f4 <Auto_Timer>:
}


void Auto_Timer()
{
	LCD_DisplayString(1,"Push Corresponding Button");
     5f4:	6c e1       	ldi	r22, 0x1C	; 28
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	38 de       	rcall	.-912    	; 0x26c <LCD_DisplayString>
	delay_ms(1500);
     5fc:	8c ed       	ldi	r24, 0xDC	; 220
     5fe:	95 e0       	ldi	r25, 0x05	; 5
     600:	f6 dd       	rcall	.-1044   	; 0x1ee <delay_ms>
	LCD_DisplayString(1, " 0.5   1  ...min");
     602:	66 e3       	ldi	r22, 0x36	; 54
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	81 e0       	ldi	r24, 0x01	; 1
	delay_ms(1500);
     608:	31 de       	rcall	.-926    	; 0x26c <LCD_DisplayString>
     60a:	8c ed       	ldi	r24, 0xDC	; 220
     60c:	95 e0       	ldi	r25, 0x05	; 5
     60e:	ef dd       	rcall	.-1058   	; 0x1ee <delay_ms>
	
	if(TimeHolder == 0x01)
     610:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <TimeHolder>
     614:	81 30       	cpi	r24, 0x01	; 1
	{
		LCD_DisplayString(1,"Starting in -30 sec");
     616:	a1 f4       	brne	.+40     	; 0x640 <Auto_Timer+0x4c>
     618:	67 e4       	ldi	r22, 0x47	; 71
     61a:	71 e0       	ldi	r23, 0x01	; 1
		delay_ms(10000);
     61c:	27 de       	rcall	.-946    	; 0x26c <LCD_DisplayString>
     61e:	80 e1       	ldi	r24, 0x10	; 16
		LCD_DisplayString(1,"Starting in -20 sec");
     620:	97 e2       	ldi	r25, 0x27	; 39
     622:	e5 dd       	rcall	.-1078   	; 0x1ee <delay_ms>
     624:	6b e5       	ldi	r22, 0x5B	; 91
		delay_ms(10000);
     626:	71 e0       	ldi	r23, 0x01	; 1
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	20 de       	rcall	.-960    	; 0x26c <LCD_DisplayString>
		LCD_DisplayString(1,"Starting in -10 sec");
     62c:	80 e1       	ldi	r24, 0x10	; 16
     62e:	97 e2       	ldi	r25, 0x27	; 39
     630:	de dd       	rcall	.-1092   	; 0x1ee <delay_ms>
     632:	6f e6       	ldi	r22, 0x6F	; 111
     634:	71 e0       	ldi	r23, 0x01	; 1
		delay_ms(10000);
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	19 de       	rcall	.-974    	; 0x26c <LCD_DisplayString>
		}
		
		if(TimeHolder == 0x02)
     63a:	80 e1       	ldi	r24, 0x10	; 16
     63c:	97 e2       	ldi	r25, 0x27	; 39
		{
			LCD_DisplayString(1,"Starting in -60 sec");
     63e:	d7 dd       	rcall	.-1106   	; 0x1ee <delay_ms>
     640:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <TimeHolder>
			delay_ms(10000);
     644:	82 30       	cpi	r24, 0x02	; 2
     646:	51 f5       	brne	.+84     	; 0x69c <Auto_Timer+0xa8>
     648:	63 e8       	ldi	r22, 0x83	; 131
			LCD_DisplayString(1,"Starting in -50 sec");
     64a:	71 e0       	ldi	r23, 0x01	; 1
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	0e de       	rcall	.-996    	; 0x26c <LCD_DisplayString>
			delay_ms(10000);
     650:	80 e1       	ldi	r24, 0x10	; 16
     652:	97 e2       	ldi	r25, 0x27	; 39
			LCD_DisplayString(1,"Starting in -40 sec");
     654:	cc dd       	rcall	.-1128   	; 0x1ee <delay_ms>
     656:	67 e9       	ldi	r22, 0x97	; 151
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	81 e0       	ldi	r24, 0x01	; 1
			delay_ms(10000);
     65c:	07 de       	rcall	.-1010   	; 0x26c <LCD_DisplayString>
     65e:	80 e1       	ldi	r24, 0x10	; 16
     660:	97 e2       	ldi	r25, 0x27	; 39
			LCD_DisplayString(1,"Starting in -30 sec");
     662:	c5 dd       	rcall	.-1142   	; 0x1ee <delay_ms>
     664:	6b ea       	ldi	r22, 0xAB	; 171
     666:	71 e0       	ldi	r23, 0x01	; 1
			delay_ms(10000);
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	00 de       	rcall	.-1024   	; 0x26c <LCD_DisplayString>
     66c:	80 e1       	ldi	r24, 0x10	; 16
     66e:	97 e2       	ldi	r25, 0x27	; 39
			LCD_DisplayString(1,"Starting in -20 sec");
     670:	be dd       	rcall	.-1156   	; 0x1ee <delay_ms>
     672:	67 e4       	ldi	r22, 0x47	; 71
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	f9 dd       	rcall	.-1038   	; 0x26c <LCD_DisplayString>
			delay_ms(10000);
     67a:	80 e1       	ldi	r24, 0x10	; 16
     67c:	97 e2       	ldi	r25, 0x27	; 39
     67e:	b7 dd       	rcall	.-1170   	; 0x1ee <delay_ms>
     680:	6b e5       	ldi	r22, 0x5B	; 91
			LCD_DisplayString(1,"Starting in -10 sec");
     682:	71 e0       	ldi	r23, 0x01	; 1
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	f2 dd       	rcall	.-1052   	; 0x26c <LCD_DisplayString>
     688:	80 e1       	ldi	r24, 0x10	; 16
     68a:	97 e2       	ldi	r25, 0x27	; 39
			delay_ms(10000);
     68c:	b0 dd       	rcall	.-1184   	; 0x1ee <delay_ms>
     68e:	6f e6       	ldi	r22, 0x6F	; 111
     690:	71 e0       	ldi	r23, 0x01	; 1
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	eb dd       	rcall	.-1066   	; 0x26c <LCD_DisplayString>
     696:	80 e1       	ldi	r24, 0x10	; 16
     698:	97 e2       	ldi	r25, 0x27	; 39
     69a:	a9 cd       	rjmp	.-1198   	; 0x1ee <delay_ms>
     69c:	08 95       	ret

0000069e <ReceiveBluetooth>:
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     69e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	
	
}
void ReceiveBluetooth()
{
	if(USART_HasReceived(1))
     6a2:	88 23       	and	r24, r24
     6a4:	e4 f4       	brge	.+56     	; 0x6de <ReceiveBluetooth+0x40>
	{
		
		btemp = USART_Receive(1);
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 dd       	rcall	.-1248   	; 0x1ca <USART_Receive>
     6aa:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <btemp>
		
		
			if(btemp ==0x01)
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	49 f4       	brne	.+18     	; 0x6c4 <ReceiveBluetooth+0x26>
			{
				LCD_DisplayString(1,"Received ON:BLuetooth");
     6b2:	6f eb       	ldi	r22, 0xBF	; 191
     6b4:	71 e0       	ldi	r23, 0x01	; 1
     6b6:	da dd       	rcall	.-1100   	; 0x26c <LCD_DisplayString>
				Bluetooth_Status_Slctr = 0x01;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <__data_end>
				delay_ms(1500);
     6be:	8c ed       	ldi	r24, 0xDC	; 220
     6c0:	95 e0       	ldi	r25, 0x05	; 5
			}
			
			if(btemp ==0x00)
     6c2:	95 dd       	rcall	.-1238   	; 0x1ee <delay_ms>
     6c4:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <btemp>
			{
				LCD_DisplayString(1,"Received OFF:Bluetooth");
     6c8:	81 11       	cpse	r24, r1
     6ca:	09 c0       	rjmp	.+18     	; 0x6de <ReceiveBluetooth+0x40>
     6cc:	65 ed       	ldi	r22, 0xD5	; 213
				Bluetooth_Status_Slctr = 0x00;
     6ce:	71 e0       	ldi	r23, 0x01	; 1
				delay_ms(1500);
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	cc dd       	rcall	.-1128   	; 0x26c <LCD_DisplayString>
     6d4:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <__data_end>
     6d8:	8c ed       	ldi	r24, 0xDC	; 220
     6da:	95 e0       	ldi	r25, 0x05	; 5
     6dc:	88 cd       	rjmp	.-1264   	; 0x1ee <delay_ms>
     6de:	08 95       	ret

000006e0 <Tick>:
*/
enum States {idle, Geni_press,Geni_release,Sht_Dwn_press,Sht_Dwn_rlse,Sensor_Polling,Auto_Strt_press,Auto_Srt_release,Auto_Time_Slct_Prss,Auto_P1_press,Auto_P2_press,Auto_P1_rlse,Auto_P2_rlse,BlueTooth_ON_Prss,BlueTooth_ON_Rlse}state;	
	
void Tick()
{
	button1 = ~PIND & 0x01;
     6e0:	89 b1       	in	r24, 0x09	; 9
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	38 2f       	mov	r19, r24
     6e6:	31 70       	andi	r19, 0x01	; 1
     6e8:	80 fd       	sbrc	r24, 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <button1>
	button2 = ~PIND & 0x02;
     6f0:	89 b1       	in	r24, 0x09	; 9
     6f2:	80 95       	com	r24
     6f4:	82 70       	andi	r24, 0x02	; 2
     6f6:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <button2>
	button3 = ~PIND & 0x10;
     6fa:	99 b1       	in	r25, 0x09	; 9
     6fc:	90 95       	com	r25
     6fe:	90 71       	andi	r25, 0x10	; 16
     700:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <button3>
	button4 = ~PIND & 0x20;
     704:	29 b1       	in	r18, 0x09	; 9
     706:	20 95       	com	r18
     708:	20 72       	andi	r18, 0x20	; 32
     70a:	20 93 27 03 	sts	0x0327, r18	; 0x800327 <button4>
	
	switch(state)
     70e:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <state>
     712:	4e 2f       	mov	r20, r30
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	4f 30       	cpi	r20, 0x0F	; 15
     718:	51 05       	cpc	r21, r1
     71a:	08 f0       	brcs	.+2      	; 0x71e <Tick+0x3e>
     71c:	bc c0       	rjmp	.+376    	; 0x896 <Tick+0x1b6>
     71e:	fa 01       	movw	r30, r20
     720:	ea 5b       	subi	r30, 0xBA	; 186
     722:	ff 4f       	sbci	r31, 0xFF	; 255
     724:	c1 c4       	rjmp	.+2434   	; 0x10a8 <__tablejump2__>
	{
		case idle:								//In idle
		if(button1 ) 
     726:	31 11       	cpse	r19, r1
     728:	04 c0       	rjmp	.+8      	; 0x732 <Tick+0x52>
		{	
			state = Geni_press;					//Manual Start
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
     730:	c6 c0       	rjmp	.+396    	; 0x8be <Tick+0x1de>
		}
		
		
		else if(!button3 && !button1 && button2)
     732:	91 11       	cpse	r25, r1
     734:	bc c0       	rjmp	.+376    	; 0x8ae <Tick+0x1ce>
     736:	33 23       	and	r19, r19
     738:	09 f4       	brne	.+2      	; 0x73c <Tick+0x5c>
     73a:	b9 c0       	rjmp	.+370    	; 0x8ae <Tick+0x1ce>
     73c:	88 23       	and	r24, r24
     73e:	09 f4       	brne	.+2      	; 0x742 <Tick+0x62>
     740:	1d c1       	rjmp	.+570    	; 0x97c <Tick+0x29c>
		{
			state = Auto_Strt_press;
     742:	86 e0       	ldi	r24, 0x06	; 6
     744:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
     748:	cb c0       	rjmp	.+406    	; 0x8e0 <Tick+0x200>
		}
		
		else if(!button3 && !button2 && button4 && !button1)
		{
			state = BlueTooth_ON_Prss;
     74a:	8d e0       	ldi	r24, 0x0D	; 13
     74c:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
     750:	01 c1       	rjmp	.+514    	; 0x954 <Tick+0x274>
			state = idle;
		}
		break;
		
		case BlueTooth_ON_Prss:
		if(!button1&&!button2&&!button3&& button4)
     752:	33 23       	and	r19, r19
     754:	09 f4       	brne	.+2      	; 0x758 <Tick+0x78>
     756:	fe c0       	rjmp	.+508    	; 0x954 <Tick+0x274>
     758:	81 11       	cpse	r24, r1
     75a:	fc c0       	rjmp	.+504    	; 0x954 <Tick+0x274>
     75c:	91 11       	cpse	r25, r1
     75e:	fa c0       	rjmp	.+500    	; 0x954 <Tick+0x274>
     760:	21 11       	cpse	r18, r1
     762:	f8 c0       	rjmp	.+496    	; 0x954 <Tick+0x274>
			state = BlueTooth_ON_Prss;
		}
		
		else if(!button1&&!button2&&!button3&& !button4)
		{
			state = BlueTooth_ON_Rlse;
     764:	8e e0       	ldi	r24, 0x0E	; 14
     766:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
     76a:	fc c0       	rjmp	.+504    	; 0x964 <Tick+0x284>
		}
		break;
		
		case BlueTooth_ON_Rlse:
		if(Bluetooth_Status_Slctr !=0x01)						//keep polling until Bluetooth_Status_Slctr != '2';
     76c:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <__data_end>
     770:	81 30       	cpi	r24, 0x01	; 1
		{
			ReceiveBluetooth();
     772:	49 f0       	breq	.+18     	; 0x786 <Tick+0xa6>
     774:	94 df       	rcall	.-216    	; 0x69e <ReceiveBluetooth>
			state = BlueTooth_ON_Rlse;
     776:	8e e0       	ldi	r24, 0x0E	; 14
     778:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
		}
		
		
		if(Bluetooth_Status_Slctr == 0x01)						//Selected to Start through Bluetooth
     77c:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <__data_end>
     780:	81 30       	cpi	r24, 0x01	; 1
     782:	09 f0       	breq	.+2      	; 0x786 <Tick+0xa6>
     784:	ef c0       	rjmp	.+478    	; 0x964 <Tick+0x284>
		{
			LCD_DisplayString(1,"Bluetooth:1 ON");
     786:	6c ee       	ldi	r22, 0xEC	; 236
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	81 e0       	ldi	r24, 0x01	; 1
			delay_ms(1500);
     78c:	6f dd       	rcall	.-1314   	; 0x26c <LCD_DisplayString>
     78e:	8c ed       	ldi	r24, 0xDC	; 220
     790:	95 e0       	ldi	r25, 0x05	; 5
     792:	2d dd       	rcall	.-1446   	; 0x1ee <delay_ms>
			state = Geni_release;
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
     79a:	96 c0       	rjmp	.+300    	; 0x8c8 <Tick+0x1e8>
			if(button1 ) {
				state = Geni_press;
			}

		
			else if(!button1 )
     79c:	33 23       	and	r19, r19
     79e:	09 f4       	brne	.+2      	; 0x7a2 <Tick+0xc2>
     7a0:	8e c0       	rjmp	.+284    	; 0x8be <Tick+0x1de>
			{
				state = Geni_release;
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
     7a8:	8f c0       	rjmp	.+286    	; 0x8c8 <Tick+0x1e8>

		break;
		
		case Geni_release:						//Begins to poll ADC data
		{
			state = Sensor_Polling;					
     7aa:	85 e0       	ldi	r24, 0x05	; 5
     7ac:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
		}
		break;
     7b0:	95 c0       	rjmp	.+298    	; 0x8dc <Tick+0x1fc>
		
		case Sensor_Polling:					//infintie Sensor loop; FIX
			
			
		if(button3&&!button1&&!button2)
     7b2:	99 23       	and	r25, r25
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <Tick+0xd8>
     7b6:	92 c0       	rjmp	.+292    	; 0x8dc <Tick+0x1fc>
     7b8:	33 23       	and	r19, r19
     7ba:	09 f4       	brne	.+2      	; 0x7be <Tick+0xde>
     7bc:	8f c0       	rjmp	.+286    	; 0x8dc <Tick+0x1fc>
     7be:	81 11       	cpse	r24, r1
     7c0:	8d c0       	rjmp	.+282    	; 0x8dc <Tick+0x1fc>
		{
			state = Sht_Dwn_press;
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
     7c8:	9c c0       	rjmp	.+312    	; 0x902 <Tick+0x222>
		}
		
		break;
		
		case Auto_Strt_press:
		if(button2 && !button1 && !button3)
     7ca:	81 11       	cpse	r24, r1
     7cc:	89 c0       	rjmp	.+274    	; 0x8e0 <Tick+0x200>
		{
			state = Auto_Strt_press;
		}
		
		else if(!button2 && !button1 && !button3)
     7ce:	33 23       	and	r19, r19
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <Tick+0xf4>
     7d2:	86 c0       	rjmp	.+268    	; 0x8e0 <Tick+0x200>
     7d4:	91 11       	cpse	r25, r1
     7d6:	84 c0       	rjmp	.+264    	; 0x8e0 <Tick+0x200>
		{
			state = Auto_Srt_release;
     7d8:	87 e0       	ldi	r24, 0x07	; 7
     7da:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
     7de:	88 c0       	rjmp	.+272    	; 0x8f0 <Tick+0x210>
		}
		break;
		
		case Auto_Srt_release:									//Select How much time to wait to Start
			if(button1 && !button2 && ! button3)
     7e0:	31 11       	cpse	r19, r1
     7e2:	c8 c0       	rjmp	.+400    	; 0x974 <Tick+0x294>
     7e4:	81 11       	cpse	r24, r1
     7e6:	d4 c0       	rjmp	.+424    	; 0x990 <Tick+0x2b0>
     7e8:	91 11       	cpse	r25, r1
			{
				LCD_DisplayString(1,"Inside 1/2 Sec");
     7ea:	82 c0       	rjmp	.+260    	; 0x8f0 <Tick+0x210>
     7ec:	6b ef       	ldi	r22, 0xFB	; 251
     7ee:	71 e0       	ldi	r23, 0x01	; 1
     7f0:	81 e0       	ldi	r24, 0x01	; 1
				delay_ms(1500);
     7f2:	3c dd       	rcall	.-1416   	; 0x26c <LCD_DisplayString>
     7f4:	8c ed       	ldi	r24, 0xDC	; 220
     7f6:	95 e0       	ldi	r25, 0x05	; 5
     7f8:	fa dc       	rcall	.-1548   	; 0x1ee <delay_ms>
				state = Auto_P1_press;
     7fa:	89 e0       	ldi	r24, 0x09	; 9
     7fc:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
			}
			
			 if(button2 && !button1 && ! button3)
     800:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <button2>
     804:	81 11       	cpse	r24, r1
     806:	be c0       	rjmp	.+380    	; 0x984 <Tick+0x2a4>
     808:	8e c0       	rjmp	.+284    	; 0x926 <Tick+0x246>
     80a:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <button3>
			{
				LCD_DisplayString(1,"Inside 1 MIN");
     80e:	81 11       	cpse	r24, r1
     810:	42 c0       	rjmp	.+132    	; 0x896 <Tick+0x1b6>
     812:	6a e0       	ldi	r22, 0x0A	; 10
     814:	72 e0       	ldi	r23, 0x02	; 2
				delay_ms(1500);
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	29 dd       	rcall	.-1454   	; 0x26c <LCD_DisplayString>
     81a:	8c ed       	ldi	r24, 0xDC	; 220
     81c:	95 e0       	ldi	r25, 0x05	; 5
				state = Auto_P2_press;
     81e:	e7 dc       	rcall	.-1586   	; 0x1ee <delay_ms>
     820:	8a e0       	ldi	r24, 0x0A	; 10
     822:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
			}
		break;
		
		case Auto_P1_press:
		if(button1 && !button2 && ! button3)
     826:	8c c0       	rjmp	.+280    	; 0x940 <Tick+0x260>
     828:	33 23       	and	r19, r19
     82a:	09 f4       	brne	.+2      	; 0x82e <Tick+0x14e>
		{
			state = Auto_P1_press;
		}
		
		else if(!button1 && !button2 && ! button3)
     82c:	7c c0       	rjmp	.+248    	; 0x926 <Tick+0x246>
     82e:	09 f4       	brne	.+2      	; 0x832 <Tick+0x152>
     830:	7a c0       	rjmp	.+244    	; 0x926 <Tick+0x246>
     832:	81 11       	cpse	r24, r1
     834:	78 c0       	rjmp	.+240    	; 0x926 <Tick+0x246>
     836:	91 11       	cpse	r25, r1
		{
			TimeHolder = 0x01;
     838:	76 c0       	rjmp	.+236    	; 0x926 <Tick+0x246>
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <TimeHolder>
			state = Auto_P1_rlse;
     840:	8b e0       	ldi	r24, 0x0B	; 11
     842:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
		}
		
		break;
		
		case Auto_P2_press:
		if(!button1 && button2 && ! button3)
     846:	77 c0       	rjmp	.+238    	; 0x936 <Tick+0x256>
     848:	33 23       	and	r19, r19
     84a:	51 f0       	breq	.+20     	; 0x860 <Tick+0x180>
		{
			state = Auto_P2_press;
		}
		
		else if(!button1 && !button2 && ! button3)
     84c:	81 11       	cpse	r24, r1
		{
			TimeHolder = 0x02;
     84e:	08 c0       	rjmp	.+16     	; 0x860 <Tick+0x180>
     850:	91 11       	cpse	r25, r1
     852:	06 c0       	rjmp	.+12     	; 0x860 <Tick+0x180>
			state = Auto_P2_rlse;
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <TimeHolder>
			
		}
		
		case Auto_P1_rlse:
		Auto_Timer();
		state = Geni_release;
     85a:	8c e0       	ldi	r24, 0x0C	; 12
		LCD_DisplayString(1,"Engine Starting...Vroom....Vrooom");
     85c:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
     860:	c9 de       	rcall	.-622    	; 0x5f4 <Auto_Timer>
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
		delay_ms(1500);
     868:	67 e1       	ldi	r22, 0x17	; 23
		break;
		
		case Auto_P2_rlse:
		Auto_Timer();
     86a:	72 e0       	ldi	r23, 0x02	; 2
     86c:	81 e0       	ldi	r24, 0x01	; 1
		state = Geni_release;
     86e:	fe dc       	rcall	.-1540   	; 0x26c <LCD_DisplayString>
     870:	8c ed       	ldi	r24, 0xDC	; 220
     872:	95 e0       	ldi	r25, 0x05	; 5
		LCD_DisplayString(1,"Engine Starting...Vroom....Vrooom");
     874:	bc dc       	rcall	.-1672   	; 0x1ee <delay_ms>
     876:	0f c0       	rjmp	.+30     	; 0x896 <Tick+0x1b6>
     878:	bd de       	rcall	.-646    	; 0x5f4 <Auto_Timer>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <state>
		delay_ms(1500);
     880:	67 e1       	ldi	r22, 0x17	; 23
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	81 e0       	ldi	r24, 0x01	; 1
			state = Sht_Dwn_rlse;
			
		}
		
		case Sht_Dwn_rlse:
		state = idle;
     886:	f2 dc       	rcall	.-1564   	; 0x26c <LCD_DisplayString>
		break;
     888:	8c ed       	ldi	r24, 0xDC	; 220
		
		default:
		break;
	}
	
	switch(state)
     88a:	95 e0       	ldi	r25, 0x05	; 5
     88c:	b0 dc       	rcall	.-1696   	; 0x1ee <delay_ms>
     88e:	03 c0       	rjmp	.+6      	; 0x896 <Tick+0x1b6>
     890:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <state>
     894:	0c c0       	rjmp	.+24     	; 0x8ae <Tick+0x1ce>
     896:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <state>
     89a:	8e 2f       	mov	r24, r30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	8f 30       	cpi	r24, 0x0F	; 15
	{
		case idle:
		LCD_DisplayString(1,"In Idle");
     8a0:	91 05       	cpc	r25, r1
     8a2:	08 f0       	brcs	.+2      	; 0x8a6 <Tick+0x1c6>
     8a4:	7a c0       	rjmp	.+244    	; 0x99a <Tick+0x2ba>
		PORTB = SetBit1(PORTD,3,0);
     8a6:	fc 01       	movw	r30, r24
char TimeHolder;
 char btemp;
 char Bluetooth_Status_Slctr =0x00;						//holds Bluetooth Input from phone '1' is on '0'; default '2'
 char OFF_Bluetooth_Status_Slctr =0x04;					//USED to trigger off after Engine was turned on
unsigned char SetBit1(unsigned char x, unsigned char k, unsigned char b) {
	return (b ?  (x | (0x01 << k))  :  (x & ~(0x01 << k)) );
     8a8:	eb 5a       	subi	r30, 0xAB	; 171
		LCD_DisplayString(1,"In Idle");
		PORTB = SetBit1(PORTD,3,0);
		break;
		
		case Geni_press:
		LCD_DisplayString(1,"Pressing Button1");
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	fd c3       	rjmp	.+2042   	; 0x10a8 <__tablejump2__>
     8ae:	69 e3       	ldi	r22, 0x39	; 57
     8b0:	72 e0       	ldi	r23, 0x02	; 2
		break;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
		
		case  Geni_release:
		LCD_DisplayString(1,"Engine Starting...Vroom....Vrooom");
     8b4:	db dc       	rcall	.-1610   	; 0x26c <LCD_DisplayString>
     8b6:	8b b1       	in	r24, 0x0b	; 11
     8b8:	87 7f       	andi	r24, 0xF7	; 247
     8ba:	85 b9       	out	0x05, r24	; 5
		delay_ms(1500);
     8bc:	08 95       	ret
     8be:	61 e4       	ldi	r22, 0x41	; 65
		PORTB = SetBit1(PORTB,3,1);
     8c0:	72 e0       	ldi	r23, 0x02	; 2
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	d3 cc       	rjmp	.-1626   	; 0x26c <LCD_DisplayString>
     8c6:	08 95       	ret
     8c8:	67 e1       	ldi	r22, 0x17	; 23
     8ca:	72 e0       	ldi	r23, 0x02	; 2
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	ce dc       	rcall	.-1636   	; 0x26c <LCD_DisplayString>
     8d0:	8c ed       	ldi	r24, 0xDC	; 220
     8d2:	95 e0       	ldi	r25, 0x05	; 5
     8d4:	8c dc       	rcall	.-1768   	; 0x1ee <delay_ms>
     8d6:	2b 9a       	sbi	0x05, 3	; 5
     8d8:	2a 9a       	sbi	0x05, 2	; 5
     8da:	08 95       	ret
     8dc:	4c ce       	rjmp	.-872    	; 0x576 <Voltage_Sampler>
     8de:	08 95       	ret
     8e0:	62 e5       	ldi	r22, 0x52	; 82
     8e2:	72 e0       	ldi	r23, 0x02	; 2
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	c2 dc       	rcall	.-1660   	; 0x26c <LCD_DisplayString>
     8e8:	88 ee       	ldi	r24, 0xE8	; 232
     8ea:	93 e0       	ldi	r25, 0x03	; 3
     8ec:	80 cc       	rjmp	.-1792   	; 0x1ee <delay_ms>
     8ee:	08 95       	ret
     8f0:	66 e6       	ldi	r22, 0x66	; 102
     8f2:	72 e0       	ldi	r23, 0x02	; 2
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	ba dc       	rcall	.-1676   	; 0x26c <LCD_DisplayString>
     8f8:	80 ed       	ldi	r24, 0xD0	; 208
     8fa:	97 e0       	ldi	r25, 0x07	; 7
     8fc:	78 dc       	rcall	.-1808   	; 0x1ee <delay_ms>
     8fe:	7a ce       	rjmp	.-780    	; 0x5f4 <Auto_Timer>
     900:	08 95       	ret
     902:	61 e8       	ldi	r22, 0x81	; 129
     904:	72 e0       	ldi	r23, 0x02	; 2
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	b1 dc       	rcall	.-1694   	; 0x26c <LCD_DisplayString>
     90a:	88 e8       	ldi	r24, 0x88	; 136
     90c:	93 e1       	ldi	r25, 0x13	; 19
     90e:	6f cc       	rjmp	.-1826   	; 0x1ee <delay_ms>
     910:	08 95       	ret
     912:	2b 98       	cbi	0x05, 3	; 5
     914:	2a 98       	cbi	0x05, 2	; 5
     916:	69 e8       	ldi	r22, 0x89	; 137
     918:	72 e0       	ldi	r23, 0x02	; 2
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	a7 dc       	rcall	.-1714   	; 0x26c <LCD_DisplayString>
     91e:	80 ed       	ldi	r24, 0xD0	; 208
     920:	97 e0       	ldi	r25, 0x07	; 7
     922:	65 cc       	rjmp	.-1846   	; 0x1ee <delay_ms>
     924:	08 95       	ret
     926:	67 e9       	ldi	r22, 0x97	; 151
     928:	72 e0       	ldi	r23, 0x02	; 2
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	9f dc       	rcall	.-1730   	; 0x26c <LCD_DisplayString>
     92e:	8c ed       	ldi	r24, 0xDC	; 220
     930:	95 e0       	ldi	r25, 0x05	; 5
     932:	5d cc       	rjmp	.-1862   	; 0x1ee <delay_ms>
     934:	08 95       	ret
     936:	6b ea       	ldi	r22, 0xAB	; 171
     938:	72 e0       	ldi	r23, 0x02	; 2
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	97 cc       	rjmp	.-1746   	; 0x26c <LCD_DisplayString>
     93e:	08 95       	ret
     940:	60 ec       	ldi	r22, 0xC0	; 192
     942:	72 e0       	ldi	r23, 0x02	; 2
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	92 cc       	rjmp	.-1756   	; 0x26c <LCD_DisplayString>
     948:	08 95       	ret
     94a:	64 ed       	ldi	r22, 0xD4	; 212
     94c:	72 e0       	ldi	r23, 0x02	; 2
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	8d cc       	rjmp	.-1766   	; 0x26c <LCD_DisplayString>
     952:	08 95       	ret
     954:	69 ee       	ldi	r22, 0xE9	; 233
     956:	72 e0       	ldi	r23, 0x02	; 2
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	88 dc       	rcall	.-1776   	; 0x26c <LCD_DisplayString>
     95c:	88 e8       	ldi	r24, 0x88	; 136
     95e:	93 e1       	ldi	r25, 0x13	; 19
     960:	46 cc       	rjmp	.-1908   	; 0x1ee <delay_ms>
     962:	08 95       	ret
     964:	6a e0       	ldi	r22, 0x0A	; 10
     966:	73 e0       	ldi	r23, 0x03	; 3
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	80 dc       	rcall	.-1792   	; 0x26c <LCD_DisplayString>
     96c:	88 e8       	ldi	r24, 0x88	; 136
     96e:	93 e1       	ldi	r25, 0x13	; 19
     970:	3e cc       	rjmp	.-1924   	; 0x1ee <delay_ms>
     972:	08 95       	ret
     974:	88 23       	and	r24, r24
     976:	09 f4       	brne	.+2      	; 0x97a <Tick+0x29a>
     978:	bb cf       	rjmp	.-138    	; 0x8f0 <Tick+0x210>
     97a:	0a c0       	rjmp	.+20     	; 0x990 <Tick+0x2b0>
     97c:	22 23       	and	r18, r18
     97e:	09 f4       	brne	.+2      	; 0x982 <Tick+0x2a2>
     980:	96 cf       	rjmp	.-212    	; 0x8ae <Tick+0x1ce>
     982:	e3 ce       	rjmp	.-570    	; 0x74a <Tick+0x6a>
     984:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <button1>
     988:	88 23       	and	r24, r24
     98a:	09 f4       	brne	.+2      	; 0x98e <Tick+0x2ae>
     98c:	3e cf       	rjmp	.-388    	; 0x80a <Tick+0x12a>
     98e:	cb cf       	rjmp	.-106    	; 0x926 <Tick+0x246>
     990:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <button1>
     994:	81 11       	cpse	r24, r1
     996:	ac cf       	rjmp	.-168    	; 0x8f0 <Tick+0x210>
     998:	38 cf       	rjmp	.-400    	; 0x80a <Tick+0x12a>
     99a:	08 95       	ret

0000099c <main>:
     99c:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <state>
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	87 b9       	out	0x07, r24	; 7
     9a4:	16 b8       	out	0x06, r1	; 6
     9a6:	84 b9       	out	0x04, r24	; 4
     9a8:	13 b8       	out	0x03, r1	; 3
     9aa:	1a b8       	out	0x0a, r1	; 10
     9ac:	89 b9       	out	0x09, r24	; 9
     9ae:	11 b8       	out	0x01, r1	; 1
     9b0:	82 b9       	out	0x02, r24	; 2
     9b2:	9d dd       	rcall	.-1222   	; 0x4ee <ADC_init>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e7 db       	rcall	.-2098   	; 0x186 <initUSART>
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	e5 db       	rcall	.-2102   	; 0x186 <initUSART>
     9bc:	70 dc       	rcall	.-1824   	; 0x29e <TimerOn>
     9be:	68 ee       	ldi	r22, 0xE8	; 232
     9c0:	73 e0       	ldi	r23, 0x03	; 3
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	cb dc       	rcall	.-1642   	; 0x35e <TimerSet>
     9c8:	31 dc       	rcall	.-1950   	; 0x22c <LCD_init>
     9ca:	8a de       	rcall	.-748    	; 0x6e0 <Tick>
     9cc:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <TimerFlag>
     9d0:	88 23       	and	r24, r24
     9d2:	e1 f3       	breq	.-8      	; 0x9cc <main+0x30>
     9d4:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <TimerFlag>
     9d8:	f8 cf       	rjmp	.-16     	; 0x9ca <main+0x2e>

000009da <__subsf3>:
     9da:	50 58       	subi	r21, 0x80	; 128

000009dc <__addsf3>:
     9dc:	bb 27       	eor	r27, r27
     9de:	aa 27       	eor	r26, r26
     9e0:	0e d0       	rcall	.+28     	; 0x9fe <__addsf3x>
     9e2:	4d c1       	rjmp	.+666    	; 0xc7e <__fp_round>
     9e4:	3e d1       	rcall	.+636    	; 0xc62 <__fp_pscA>
     9e6:	30 f0       	brcs	.+12     	; 0x9f4 <__addsf3+0x18>
     9e8:	43 d1       	rcall	.+646    	; 0xc70 <__fp_pscB>
     9ea:	20 f0       	brcs	.+8      	; 0x9f4 <__addsf3+0x18>
     9ec:	31 f4       	brne	.+12     	; 0x9fa <__addsf3+0x1e>
     9ee:	9f 3f       	cpi	r25, 0xFF	; 255
     9f0:	11 f4       	brne	.+4      	; 0x9f6 <__addsf3+0x1a>
     9f2:	1e f4       	brtc	.+6      	; 0x9fa <__addsf3+0x1e>
     9f4:	33 c1       	rjmp	.+614    	; 0xc5c <__fp_nan>
     9f6:	0e f4       	brtc	.+2      	; 0x9fa <__addsf3+0x1e>
     9f8:	e0 95       	com	r30
     9fa:	e7 fb       	bst	r30, 7
     9fc:	29 c1       	rjmp	.+594    	; 0xc50 <__fp_inf>

000009fe <__addsf3x>:
     9fe:	e9 2f       	mov	r30, r25
     a00:	4f d1       	rcall	.+670    	; 0xca0 <__fp_split3>
     a02:	80 f3       	brcs	.-32     	; 0x9e4 <__addsf3+0x8>
     a04:	ba 17       	cp	r27, r26
     a06:	62 07       	cpc	r22, r18
     a08:	73 07       	cpc	r23, r19
     a0a:	84 07       	cpc	r24, r20
     a0c:	95 07       	cpc	r25, r21
     a0e:	18 f0       	brcs	.+6      	; 0xa16 <__addsf3x+0x18>
     a10:	71 f4       	brne	.+28     	; 0xa2e <__addsf3x+0x30>
     a12:	9e f5       	brtc	.+102    	; 0xa7a <__addsf3x+0x7c>
     a14:	67 c1       	rjmp	.+718    	; 0xce4 <__fp_zero>
     a16:	0e f4       	brtc	.+2      	; 0xa1a <__addsf3x+0x1c>
     a18:	e0 95       	com	r30
     a1a:	0b 2e       	mov	r0, r27
     a1c:	ba 2f       	mov	r27, r26
     a1e:	a0 2d       	mov	r26, r0
     a20:	0b 01       	movw	r0, r22
     a22:	b9 01       	movw	r22, r18
     a24:	90 01       	movw	r18, r0
     a26:	0c 01       	movw	r0, r24
     a28:	ca 01       	movw	r24, r20
     a2a:	a0 01       	movw	r20, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	ff 27       	eor	r31, r31
     a30:	59 1b       	sub	r21, r25
     a32:	99 f0       	breq	.+38     	; 0xa5a <__addsf3x+0x5c>
     a34:	59 3f       	cpi	r21, 0xF9	; 249
     a36:	50 f4       	brcc	.+20     	; 0xa4c <__addsf3x+0x4e>
     a38:	50 3e       	cpi	r21, 0xE0	; 224
     a3a:	68 f1       	brcs	.+90     	; 0xa96 <__addsf3x+0x98>
     a3c:	1a 16       	cp	r1, r26
     a3e:	f0 40       	sbci	r31, 0x00	; 0
     a40:	a2 2f       	mov	r26, r18
     a42:	23 2f       	mov	r18, r19
     a44:	34 2f       	mov	r19, r20
     a46:	44 27       	eor	r20, r20
     a48:	58 5f       	subi	r21, 0xF8	; 248
     a4a:	f3 cf       	rjmp	.-26     	; 0xa32 <__addsf3x+0x34>
     a4c:	46 95       	lsr	r20
     a4e:	37 95       	ror	r19
     a50:	27 95       	ror	r18
     a52:	a7 95       	ror	r26
     a54:	f0 40       	sbci	r31, 0x00	; 0
     a56:	53 95       	inc	r21
     a58:	c9 f7       	brne	.-14     	; 0xa4c <__addsf3x+0x4e>
     a5a:	7e f4       	brtc	.+30     	; 0xa7a <__addsf3x+0x7c>
     a5c:	1f 16       	cp	r1, r31
     a5e:	ba 0b       	sbc	r27, r26
     a60:	62 0b       	sbc	r22, r18
     a62:	73 0b       	sbc	r23, r19
     a64:	84 0b       	sbc	r24, r20
     a66:	ba f0       	brmi	.+46     	; 0xa96 <__addsf3x+0x98>
     a68:	91 50       	subi	r25, 0x01	; 1
     a6a:	a1 f0       	breq	.+40     	; 0xa94 <__addsf3x+0x96>
     a6c:	ff 0f       	add	r31, r31
     a6e:	bb 1f       	adc	r27, r27
     a70:	66 1f       	adc	r22, r22
     a72:	77 1f       	adc	r23, r23
     a74:	88 1f       	adc	r24, r24
     a76:	c2 f7       	brpl	.-16     	; 0xa68 <__addsf3x+0x6a>
     a78:	0e c0       	rjmp	.+28     	; 0xa96 <__addsf3x+0x98>
     a7a:	ba 0f       	add	r27, r26
     a7c:	62 1f       	adc	r22, r18
     a7e:	73 1f       	adc	r23, r19
     a80:	84 1f       	adc	r24, r20
     a82:	48 f4       	brcc	.+18     	; 0xa96 <__addsf3x+0x98>
     a84:	87 95       	ror	r24
     a86:	77 95       	ror	r23
     a88:	67 95       	ror	r22
     a8a:	b7 95       	ror	r27
     a8c:	f7 95       	ror	r31
     a8e:	9e 3f       	cpi	r25, 0xFE	; 254
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__addsf3x+0x96>
     a92:	b3 cf       	rjmp	.-154    	; 0x9fa <__addsf3+0x1e>
     a94:	93 95       	inc	r25
     a96:	88 0f       	add	r24, r24
     a98:	08 f0       	brcs	.+2      	; 0xa9c <__addsf3x+0x9e>
     a9a:	99 27       	eor	r25, r25
     a9c:	ee 0f       	add	r30, r30
     a9e:	97 95       	ror	r25
     aa0:	87 95       	ror	r24
     aa2:	08 95       	ret

00000aa4 <__divsf3>:
     aa4:	0c d0       	rcall	.+24     	; 0xabe <__divsf3x>
     aa6:	eb c0       	rjmp	.+470    	; 0xc7e <__fp_round>
     aa8:	e3 d0       	rcall	.+454    	; 0xc70 <__fp_pscB>
     aaa:	40 f0       	brcs	.+16     	; 0xabc <__divsf3+0x18>
     aac:	da d0       	rcall	.+436    	; 0xc62 <__fp_pscA>
     aae:	30 f0       	brcs	.+12     	; 0xabc <__divsf3+0x18>
     ab0:	21 f4       	brne	.+8      	; 0xaba <__divsf3+0x16>
     ab2:	5f 3f       	cpi	r21, 0xFF	; 255
     ab4:	19 f0       	breq	.+6      	; 0xabc <__divsf3+0x18>
     ab6:	cc c0       	rjmp	.+408    	; 0xc50 <__fp_inf>
     ab8:	51 11       	cpse	r21, r1
     aba:	15 c1       	rjmp	.+554    	; 0xce6 <__fp_szero>
     abc:	cf c0       	rjmp	.+414    	; 0xc5c <__fp_nan>

00000abe <__divsf3x>:
     abe:	f0 d0       	rcall	.+480    	; 0xca0 <__fp_split3>
     ac0:	98 f3       	brcs	.-26     	; 0xaa8 <__divsf3+0x4>

00000ac2 <__divsf3_pse>:
     ac2:	99 23       	and	r25, r25
     ac4:	c9 f3       	breq	.-14     	; 0xab8 <__divsf3+0x14>
     ac6:	55 23       	and	r21, r21
     ac8:	b1 f3       	breq	.-20     	; 0xab6 <__divsf3+0x12>
     aca:	95 1b       	sub	r25, r21
     acc:	55 0b       	sbc	r21, r21
     ace:	bb 27       	eor	r27, r27
     ad0:	aa 27       	eor	r26, r26
     ad2:	62 17       	cp	r22, r18
     ad4:	73 07       	cpc	r23, r19
     ad6:	84 07       	cpc	r24, r20
     ad8:	38 f0       	brcs	.+14     	; 0xae8 <__divsf3_pse+0x26>
     ada:	9f 5f       	subi	r25, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	22 0f       	add	r18, r18
     ae0:	33 1f       	adc	r19, r19
     ae2:	44 1f       	adc	r20, r20
     ae4:	aa 1f       	adc	r26, r26
     ae6:	a9 f3       	breq	.-22     	; 0xad2 <__divsf3_pse+0x10>
     ae8:	33 d0       	rcall	.+102    	; 0xb50 <__divsf3_pse+0x8e>
     aea:	0e 2e       	mov	r0, r30
     aec:	3a f0       	brmi	.+14     	; 0xafc <__divsf3_pse+0x3a>
     aee:	e0 e8       	ldi	r30, 0x80	; 128
     af0:	30 d0       	rcall	.+96     	; 0xb52 <__divsf3_pse+0x90>
     af2:	91 50       	subi	r25, 0x01	; 1
     af4:	50 40       	sbci	r21, 0x00	; 0
     af6:	e6 95       	lsr	r30
     af8:	00 1c       	adc	r0, r0
     afa:	ca f7       	brpl	.-14     	; 0xaee <__divsf3_pse+0x2c>
     afc:	29 d0       	rcall	.+82     	; 0xb50 <__divsf3_pse+0x8e>
     afe:	fe 2f       	mov	r31, r30
     b00:	27 d0       	rcall	.+78     	; 0xb50 <__divsf3_pse+0x8e>
     b02:	66 0f       	add	r22, r22
     b04:	77 1f       	adc	r23, r23
     b06:	88 1f       	adc	r24, r24
     b08:	bb 1f       	adc	r27, r27
     b0a:	26 17       	cp	r18, r22
     b0c:	37 07       	cpc	r19, r23
     b0e:	48 07       	cpc	r20, r24
     b10:	ab 07       	cpc	r26, r27
     b12:	b0 e8       	ldi	r27, 0x80	; 128
     b14:	09 f0       	breq	.+2      	; 0xb18 <__divsf3_pse+0x56>
     b16:	bb 0b       	sbc	r27, r27
     b18:	80 2d       	mov	r24, r0
     b1a:	bf 01       	movw	r22, r30
     b1c:	ff 27       	eor	r31, r31
     b1e:	93 58       	subi	r25, 0x83	; 131
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	2a f0       	brmi	.+10     	; 0xb2e <__divsf3_pse+0x6c>
     b24:	9e 3f       	cpi	r25, 0xFE	; 254
     b26:	51 05       	cpc	r21, r1
     b28:	68 f0       	brcs	.+26     	; 0xb44 <__divsf3_pse+0x82>
     b2a:	92 c0       	rjmp	.+292    	; 0xc50 <__fp_inf>
     b2c:	dc c0       	rjmp	.+440    	; 0xce6 <__fp_szero>
     b2e:	5f 3f       	cpi	r21, 0xFF	; 255
     b30:	ec f3       	brlt	.-6      	; 0xb2c <__divsf3_pse+0x6a>
     b32:	98 3e       	cpi	r25, 0xE8	; 232
     b34:	dc f3       	brlt	.-10     	; 0xb2c <__divsf3_pse+0x6a>
     b36:	86 95       	lsr	r24
     b38:	77 95       	ror	r23
     b3a:	67 95       	ror	r22
     b3c:	b7 95       	ror	r27
     b3e:	f7 95       	ror	r31
     b40:	9f 5f       	subi	r25, 0xFF	; 255
     b42:	c9 f7       	brne	.-14     	; 0xb36 <__divsf3_pse+0x74>
     b44:	88 0f       	add	r24, r24
     b46:	91 1d       	adc	r25, r1
     b48:	96 95       	lsr	r25
     b4a:	87 95       	ror	r24
     b4c:	97 f9       	bld	r25, 7
     b4e:	08 95       	ret
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	66 0f       	add	r22, r22
     b54:	77 1f       	adc	r23, r23
     b56:	88 1f       	adc	r24, r24
     b58:	bb 1f       	adc	r27, r27
     b5a:	62 17       	cp	r22, r18
     b5c:	73 07       	cpc	r23, r19
     b5e:	84 07       	cpc	r24, r20
     b60:	ba 07       	cpc	r27, r26
     b62:	20 f0       	brcs	.+8      	; 0xb6c <__divsf3_pse+0xaa>
     b64:	62 1b       	sub	r22, r18
     b66:	73 0b       	sbc	r23, r19
     b68:	84 0b       	sbc	r24, r20
     b6a:	ba 0b       	sbc	r27, r26
     b6c:	ee 1f       	adc	r30, r30
     b6e:	88 f7       	brcc	.-30     	; 0xb52 <__divsf3_pse+0x90>
     b70:	e0 95       	com	r30
     b72:	08 95       	ret

00000b74 <__fixsfsi>:
     b74:	04 d0       	rcall	.+8      	; 0xb7e <__fixunssfsi>
     b76:	68 94       	set
     b78:	b1 11       	cpse	r27, r1
     b7a:	b5 c0       	rjmp	.+362    	; 0xce6 <__fp_szero>
     b7c:	08 95       	ret

00000b7e <__fixunssfsi>:
     b7e:	98 d0       	rcall	.+304    	; 0xcb0 <__fp_splitA>
     b80:	88 f0       	brcs	.+34     	; 0xba4 <__fixunssfsi+0x26>
     b82:	9f 57       	subi	r25, 0x7F	; 127
     b84:	90 f0       	brcs	.+36     	; 0xbaa <__fixunssfsi+0x2c>
     b86:	b9 2f       	mov	r27, r25
     b88:	99 27       	eor	r25, r25
     b8a:	b7 51       	subi	r27, 0x17	; 23
     b8c:	a0 f0       	brcs	.+40     	; 0xbb6 <__fixunssfsi+0x38>
     b8e:	d1 f0       	breq	.+52     	; 0xbc4 <__fixunssfsi+0x46>
     b90:	66 0f       	add	r22, r22
     b92:	77 1f       	adc	r23, r23
     b94:	88 1f       	adc	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	1a f0       	brmi	.+6      	; 0xba0 <__fixunssfsi+0x22>
     b9a:	ba 95       	dec	r27
     b9c:	c9 f7       	brne	.-14     	; 0xb90 <__fixunssfsi+0x12>
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__fixunssfsi+0x46>
     ba0:	b1 30       	cpi	r27, 0x01	; 1
     ba2:	81 f0       	breq	.+32     	; 0xbc4 <__fixunssfsi+0x46>
     ba4:	9f d0       	rcall	.+318    	; 0xce4 <__fp_zero>
     ba6:	b1 e0       	ldi	r27, 0x01	; 1
     ba8:	08 95       	ret
     baa:	9c c0       	rjmp	.+312    	; 0xce4 <__fp_zero>
     bac:	67 2f       	mov	r22, r23
     bae:	78 2f       	mov	r23, r24
     bb0:	88 27       	eor	r24, r24
     bb2:	b8 5f       	subi	r27, 0xF8	; 248
     bb4:	39 f0       	breq	.+14     	; 0xbc4 <__fixunssfsi+0x46>
     bb6:	b9 3f       	cpi	r27, 0xF9	; 249
     bb8:	cc f3       	brlt	.-14     	; 0xbac <__fixunssfsi+0x2e>
     bba:	86 95       	lsr	r24
     bbc:	77 95       	ror	r23
     bbe:	67 95       	ror	r22
     bc0:	b3 95       	inc	r27
     bc2:	d9 f7       	brne	.-10     	; 0xbba <__fixunssfsi+0x3c>
     bc4:	3e f4       	brtc	.+14     	; 0xbd4 <__fixunssfsi+0x56>
     bc6:	90 95       	com	r25
     bc8:	80 95       	com	r24
     bca:	70 95       	com	r23
     bcc:	61 95       	neg	r22
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	8f 4f       	sbci	r24, 0xFF	; 255
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	08 95       	ret

00000bd6 <__floatunsisf>:
     bd6:	e8 94       	clt
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <__floatsisf+0x12>

00000bda <__floatsisf>:
     bda:	97 fb       	bst	r25, 7
     bdc:	3e f4       	brtc	.+14     	; 0xbec <__floatsisf+0x12>
     bde:	90 95       	com	r25
     be0:	80 95       	com	r24
     be2:	70 95       	com	r23
     be4:	61 95       	neg	r22
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	8f 4f       	sbci	r24, 0xFF	; 255
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	99 23       	and	r25, r25
     bee:	a9 f0       	breq	.+42     	; 0xc1a <__floatsisf+0x40>
     bf0:	f9 2f       	mov	r31, r25
     bf2:	96 e9       	ldi	r25, 0x96	; 150
     bf4:	bb 27       	eor	r27, r27
     bf6:	93 95       	inc	r25
     bf8:	f6 95       	lsr	r31
     bfa:	87 95       	ror	r24
     bfc:	77 95       	ror	r23
     bfe:	67 95       	ror	r22
     c00:	b7 95       	ror	r27
     c02:	f1 11       	cpse	r31, r1
     c04:	f8 cf       	rjmp	.-16     	; 0xbf6 <__floatsisf+0x1c>
     c06:	fa f4       	brpl	.+62     	; 0xc46 <__floatsisf+0x6c>
     c08:	bb 0f       	add	r27, r27
     c0a:	11 f4       	brne	.+4      	; 0xc10 <__floatsisf+0x36>
     c0c:	60 ff       	sbrs	r22, 0
     c0e:	1b c0       	rjmp	.+54     	; 0xc46 <__floatsisf+0x6c>
     c10:	6f 5f       	subi	r22, 0xFF	; 255
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	16 c0       	rjmp	.+44     	; 0xc46 <__floatsisf+0x6c>
     c1a:	88 23       	and	r24, r24
     c1c:	11 f0       	breq	.+4      	; 0xc22 <__floatsisf+0x48>
     c1e:	96 e9       	ldi	r25, 0x96	; 150
     c20:	11 c0       	rjmp	.+34     	; 0xc44 <__floatsisf+0x6a>
     c22:	77 23       	and	r23, r23
     c24:	21 f0       	breq	.+8      	; 0xc2e <__floatsisf+0x54>
     c26:	9e e8       	ldi	r25, 0x8E	; 142
     c28:	87 2f       	mov	r24, r23
     c2a:	76 2f       	mov	r23, r22
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <__floatsisf+0x5e>
     c2e:	66 23       	and	r22, r22
     c30:	71 f0       	breq	.+28     	; 0xc4e <__floatsisf+0x74>
     c32:	96 e8       	ldi	r25, 0x86	; 134
     c34:	86 2f       	mov	r24, r22
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	2a f0       	brmi	.+10     	; 0xc46 <__floatsisf+0x6c>
     c3c:	9a 95       	dec	r25
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	da f7       	brpl	.-10     	; 0xc3c <__floatsisf+0x62>
     c46:	88 0f       	add	r24, r24
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	97 f9       	bld	r25, 7
     c4e:	08 95       	ret

00000c50 <__fp_inf>:
     c50:	97 f9       	bld	r25, 7
     c52:	9f 67       	ori	r25, 0x7F	; 127
     c54:	80 e8       	ldi	r24, 0x80	; 128
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	08 95       	ret

00000c5c <__fp_nan>:
     c5c:	9f ef       	ldi	r25, 0xFF	; 255
     c5e:	80 ec       	ldi	r24, 0xC0	; 192
     c60:	08 95       	ret

00000c62 <__fp_pscA>:
     c62:	00 24       	eor	r0, r0
     c64:	0a 94       	dec	r0
     c66:	16 16       	cp	r1, r22
     c68:	17 06       	cpc	r1, r23
     c6a:	18 06       	cpc	r1, r24
     c6c:	09 06       	cpc	r0, r25
     c6e:	08 95       	ret

00000c70 <__fp_pscB>:
     c70:	00 24       	eor	r0, r0
     c72:	0a 94       	dec	r0
     c74:	12 16       	cp	r1, r18
     c76:	13 06       	cpc	r1, r19
     c78:	14 06       	cpc	r1, r20
     c7a:	05 06       	cpc	r0, r21
     c7c:	08 95       	ret

00000c7e <__fp_round>:
     c7e:	09 2e       	mov	r0, r25
     c80:	03 94       	inc	r0
     c82:	00 0c       	add	r0, r0
     c84:	11 f4       	brne	.+4      	; 0xc8a <__fp_round+0xc>
     c86:	88 23       	and	r24, r24
     c88:	52 f0       	brmi	.+20     	; 0xc9e <__fp_round+0x20>
     c8a:	bb 0f       	add	r27, r27
     c8c:	40 f4       	brcc	.+16     	; 0xc9e <__fp_round+0x20>
     c8e:	bf 2b       	or	r27, r31
     c90:	11 f4       	brne	.+4      	; 0xc96 <__fp_round+0x18>
     c92:	60 ff       	sbrs	r22, 0
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__fp_round+0x20>
     c96:	6f 5f       	subi	r22, 0xFF	; 255
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	8f 4f       	sbci	r24, 0xFF	; 255
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	08 95       	ret

00000ca0 <__fp_split3>:
     ca0:	57 fd       	sbrc	r21, 7
     ca2:	90 58       	subi	r25, 0x80	; 128
     ca4:	44 0f       	add	r20, r20
     ca6:	55 1f       	adc	r21, r21
     ca8:	59 f0       	breq	.+22     	; 0xcc0 <__fp_splitA+0x10>
     caa:	5f 3f       	cpi	r21, 0xFF	; 255
     cac:	71 f0       	breq	.+28     	; 0xcca <__fp_splitA+0x1a>
     cae:	47 95       	ror	r20

00000cb0 <__fp_splitA>:
     cb0:	88 0f       	add	r24, r24
     cb2:	97 fb       	bst	r25, 7
     cb4:	99 1f       	adc	r25, r25
     cb6:	61 f0       	breq	.+24     	; 0xcd0 <__fp_splitA+0x20>
     cb8:	9f 3f       	cpi	r25, 0xFF	; 255
     cba:	79 f0       	breq	.+30     	; 0xcda <__fp_splitA+0x2a>
     cbc:	87 95       	ror	r24
     cbe:	08 95       	ret
     cc0:	12 16       	cp	r1, r18
     cc2:	13 06       	cpc	r1, r19
     cc4:	14 06       	cpc	r1, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	f2 cf       	rjmp	.-28     	; 0xcae <__fp_split3+0xe>
     cca:	46 95       	lsr	r20
     ccc:	f1 df       	rcall	.-30     	; 0xcb0 <__fp_splitA>
     cce:	08 c0       	rjmp	.+16     	; 0xce0 <__fp_splitA+0x30>
     cd0:	16 16       	cp	r1, r22
     cd2:	17 06       	cpc	r1, r23
     cd4:	18 06       	cpc	r1, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	f1 cf       	rjmp	.-30     	; 0xcbc <__fp_splitA+0xc>
     cda:	86 95       	lsr	r24
     cdc:	71 05       	cpc	r23, r1
     cde:	61 05       	cpc	r22, r1
     ce0:	08 94       	sec
     ce2:	08 95       	ret

00000ce4 <__fp_zero>:
     ce4:	e8 94       	clt

00000ce6 <__fp_szero>:
     ce6:	bb 27       	eor	r27, r27
     ce8:	66 27       	eor	r22, r22
     cea:	77 27       	eor	r23, r23
     cec:	cb 01       	movw	r24, r22
     cee:	97 f9       	bld	r25, 7
     cf0:	08 95       	ret

00000cf2 <__mulsf3>:
     cf2:	0b d0       	rcall	.+22     	; 0xd0a <__mulsf3x>
     cf4:	c4 cf       	rjmp	.-120    	; 0xc7e <__fp_round>
     cf6:	b5 df       	rcall	.-150    	; 0xc62 <__fp_pscA>
     cf8:	28 f0       	brcs	.+10     	; 0xd04 <__mulsf3+0x12>
     cfa:	ba df       	rcall	.-140    	; 0xc70 <__fp_pscB>
     cfc:	18 f0       	brcs	.+6      	; 0xd04 <__mulsf3+0x12>
     cfe:	95 23       	and	r25, r21
     d00:	09 f0       	breq	.+2      	; 0xd04 <__mulsf3+0x12>
     d02:	a6 cf       	rjmp	.-180    	; 0xc50 <__fp_inf>
     d04:	ab cf       	rjmp	.-170    	; 0xc5c <__fp_nan>
     d06:	11 24       	eor	r1, r1
     d08:	ee cf       	rjmp	.-36     	; 0xce6 <__fp_szero>

00000d0a <__mulsf3x>:
     d0a:	ca df       	rcall	.-108    	; 0xca0 <__fp_split3>
     d0c:	a0 f3       	brcs	.-24     	; 0xcf6 <__mulsf3+0x4>

00000d0e <__mulsf3_pse>:
     d0e:	95 9f       	mul	r25, r21
     d10:	d1 f3       	breq	.-12     	; 0xd06 <__mulsf3+0x14>
     d12:	95 0f       	add	r25, r21
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	55 1f       	adc	r21, r21
     d18:	62 9f       	mul	r22, r18
     d1a:	f0 01       	movw	r30, r0
     d1c:	72 9f       	mul	r23, r18
     d1e:	bb 27       	eor	r27, r27
     d20:	f0 0d       	add	r31, r0
     d22:	b1 1d       	adc	r27, r1
     d24:	63 9f       	mul	r22, r19
     d26:	aa 27       	eor	r26, r26
     d28:	f0 0d       	add	r31, r0
     d2a:	b1 1d       	adc	r27, r1
     d2c:	aa 1f       	adc	r26, r26
     d2e:	64 9f       	mul	r22, r20
     d30:	66 27       	eor	r22, r22
     d32:	b0 0d       	add	r27, r0
     d34:	a1 1d       	adc	r26, r1
     d36:	66 1f       	adc	r22, r22
     d38:	82 9f       	mul	r24, r18
     d3a:	22 27       	eor	r18, r18
     d3c:	b0 0d       	add	r27, r0
     d3e:	a1 1d       	adc	r26, r1
     d40:	62 1f       	adc	r22, r18
     d42:	73 9f       	mul	r23, r19
     d44:	b0 0d       	add	r27, r0
     d46:	a1 1d       	adc	r26, r1
     d48:	62 1f       	adc	r22, r18
     d4a:	83 9f       	mul	r24, r19
     d4c:	a0 0d       	add	r26, r0
     d4e:	61 1d       	adc	r22, r1
     d50:	22 1f       	adc	r18, r18
     d52:	74 9f       	mul	r23, r20
     d54:	33 27       	eor	r19, r19
     d56:	a0 0d       	add	r26, r0
     d58:	61 1d       	adc	r22, r1
     d5a:	23 1f       	adc	r18, r19
     d5c:	84 9f       	mul	r24, r20
     d5e:	60 0d       	add	r22, r0
     d60:	21 1d       	adc	r18, r1
     d62:	82 2f       	mov	r24, r18
     d64:	76 2f       	mov	r23, r22
     d66:	6a 2f       	mov	r22, r26
     d68:	11 24       	eor	r1, r1
     d6a:	9f 57       	subi	r25, 0x7F	; 127
     d6c:	50 40       	sbci	r21, 0x00	; 0
     d6e:	8a f0       	brmi	.+34     	; 0xd92 <__mulsf3_pse+0x84>
     d70:	e1 f0       	breq	.+56     	; 0xdaa <__mulsf3_pse+0x9c>
     d72:	88 23       	and	r24, r24
     d74:	4a f0       	brmi	.+18     	; 0xd88 <__mulsf3_pse+0x7a>
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	bb 1f       	adc	r27, r27
     d7c:	66 1f       	adc	r22, r22
     d7e:	77 1f       	adc	r23, r23
     d80:	88 1f       	adc	r24, r24
     d82:	91 50       	subi	r25, 0x01	; 1
     d84:	50 40       	sbci	r21, 0x00	; 0
     d86:	a9 f7       	brne	.-22     	; 0xd72 <__mulsf3_pse+0x64>
     d88:	9e 3f       	cpi	r25, 0xFE	; 254
     d8a:	51 05       	cpc	r21, r1
     d8c:	70 f0       	brcs	.+28     	; 0xdaa <__mulsf3_pse+0x9c>
     d8e:	60 cf       	rjmp	.-320    	; 0xc50 <__fp_inf>
     d90:	aa cf       	rjmp	.-172    	; 0xce6 <__fp_szero>
     d92:	5f 3f       	cpi	r21, 0xFF	; 255
     d94:	ec f3       	brlt	.-6      	; 0xd90 <__mulsf3_pse+0x82>
     d96:	98 3e       	cpi	r25, 0xE8	; 232
     d98:	dc f3       	brlt	.-10     	; 0xd90 <__mulsf3_pse+0x82>
     d9a:	86 95       	lsr	r24
     d9c:	77 95       	ror	r23
     d9e:	67 95       	ror	r22
     da0:	b7 95       	ror	r27
     da2:	f7 95       	ror	r31
     da4:	e7 95       	ror	r30
     da6:	9f 5f       	subi	r25, 0xFF	; 255
     da8:	c1 f7       	brne	.-16     	; 0xd9a <__mulsf3_pse+0x8c>
     daa:	fe 2b       	or	r31, r30
     dac:	88 0f       	add	r24, r24
     dae:	91 1d       	adc	r25, r1
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	97 f9       	bld	r25, 7
     db6:	08 95       	ret

00000db8 <pow>:
     db8:	fa 01       	movw	r30, r20
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	30 96       	adiw	r30, 0x00	; 0
     dc0:	21 05       	cpc	r18, r1
     dc2:	31 05       	cpc	r19, r1
     dc4:	99 f1       	breq	.+102    	; 0xe2c <pow+0x74>
     dc6:	61 15       	cp	r22, r1
     dc8:	71 05       	cpc	r23, r1
     dca:	61 f4       	brne	.+24     	; 0xde4 <pow+0x2c>
     dcc:	80 38       	cpi	r24, 0x80	; 128
     dce:	bf e3       	ldi	r27, 0x3F	; 63
     dd0:	9b 07       	cpc	r25, r27
     dd2:	49 f1       	breq	.+82     	; 0xe26 <pow+0x6e>
     dd4:	68 94       	set
     dd6:	90 38       	cpi	r25, 0x80	; 128
     dd8:	81 05       	cpc	r24, r1
     dda:	61 f0       	breq	.+24     	; 0xdf4 <pow+0x3c>
     ddc:	80 38       	cpi	r24, 0x80	; 128
     dde:	bf ef       	ldi	r27, 0xFF	; 255
     de0:	9b 07       	cpc	r25, r27
     de2:	41 f0       	breq	.+16     	; 0xdf4 <pow+0x3c>
     de4:	99 23       	and	r25, r25
     de6:	42 f5       	brpl	.+80     	; 0xe38 <pow+0x80>
     de8:	ff 3f       	cpi	r31, 0xFF	; 255
     dea:	e1 05       	cpc	r30, r1
     dec:	31 05       	cpc	r19, r1
     dee:	21 05       	cpc	r18, r1
     df0:	11 f1       	breq	.+68     	; 0xe36 <pow+0x7e>
     df2:	e8 94       	clt
     df4:	08 94       	sec
     df6:	e7 95       	ror	r30
     df8:	d9 01       	movw	r26, r18
     dfa:	aa 23       	and	r26, r26
     dfc:	29 f4       	brne	.+10     	; 0xe08 <pow+0x50>
     dfe:	ab 2f       	mov	r26, r27
     e00:	be 2f       	mov	r27, r30
     e02:	f8 5f       	subi	r31, 0xF8	; 248
     e04:	d0 f3       	brcs	.-12     	; 0xdfa <pow+0x42>
     e06:	10 c0       	rjmp	.+32     	; 0xe28 <pow+0x70>
     e08:	ff 5f       	subi	r31, 0xFF	; 255
     e0a:	70 f4       	brcc	.+28     	; 0xe28 <pow+0x70>
     e0c:	a6 95       	lsr	r26
     e0e:	e0 f7       	brcc	.-8      	; 0xe08 <pow+0x50>
     e10:	f7 39       	cpi	r31, 0x97	; 151
     e12:	50 f0       	brcs	.+20     	; 0xe28 <pow+0x70>
     e14:	19 f0       	breq	.+6      	; 0xe1c <pow+0x64>
     e16:	ff 3a       	cpi	r31, 0xAF	; 175
     e18:	38 f4       	brcc	.+14     	; 0xe28 <pow+0x70>
     e1a:	9f 77       	andi	r25, 0x7F	; 127
     e1c:	9f 93       	push	r25
     e1e:	0c d0       	rcall	.+24     	; 0xe38 <pow+0x80>
     e20:	0f 90       	pop	r0
     e22:	07 fc       	sbrc	r0, 7
     e24:	90 58       	subi	r25, 0x80	; 128
     e26:	08 95       	ret
     e28:	3e f0       	brts	.+14     	; 0xe38 <pow+0x80>
     e2a:	18 cf       	rjmp	.-464    	; 0xc5c <__fp_nan>
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	80 e8       	ldi	r24, 0x80	; 128
     e32:	9f e3       	ldi	r25, 0x3F	; 63
     e34:	08 95       	ret
     e36:	4f e7       	ldi	r20, 0x7F	; 127
     e38:	9f 77       	andi	r25, 0x7F	; 127
     e3a:	5f 93       	push	r21
     e3c:	4f 93       	push	r20
     e3e:	3f 93       	push	r19
     e40:	2f 93       	push	r18
     e42:	9e d0       	rcall	.+316    	; 0xf80 <log>
     e44:	2f 91       	pop	r18
     e46:	3f 91       	pop	r19
     e48:	4f 91       	pop	r20
     e4a:	5f 91       	pop	r21
     e4c:	52 df       	rcall	.-348    	; 0xcf2 <__mulsf3>
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <exp>
     e50:	19 f4       	brne	.+6      	; 0xe58 <pow+0xa0>
     e52:	0e f0       	brts	.+2      	; 0xe56 <pow+0x9e>
     e54:	fd ce       	rjmp	.-518    	; 0xc50 <__fp_inf>
     e56:	46 cf       	rjmp	.-372    	; 0xce4 <__fp_zero>
     e58:	01 cf       	rjmp	.-510    	; 0xc5c <__fp_nan>

00000e5a <exp>:
     e5a:	2a df       	rcall	.-428    	; 0xcb0 <__fp_splitA>
     e5c:	c8 f3       	brcs	.-14     	; 0xe50 <pow+0x98>
     e5e:	96 38       	cpi	r25, 0x86	; 134
     e60:	c0 f7       	brcc	.-16     	; 0xe52 <pow+0x9a>
     e62:	07 f8       	bld	r0, 7
     e64:	0f 92       	push	r0
     e66:	e8 94       	clt
     e68:	2b e3       	ldi	r18, 0x3B	; 59
     e6a:	3a ea       	ldi	r19, 0xAA	; 170
     e6c:	48 eb       	ldi	r20, 0xB8	; 184
     e6e:	5f e7       	ldi	r21, 0x7F	; 127
     e70:	4e df       	rcall	.-356    	; 0xd0e <__mulsf3_pse>
     e72:	0f 92       	push	r0
     e74:	0f 92       	push	r0
     e76:	0f 92       	push	r0
     e78:	4d b7       	in	r20, 0x3d	; 61
     e7a:	5e b7       	in	r21, 0x3e	; 62
     e7c:	0f 92       	push	r0
     e7e:	c0 d0       	rcall	.+384    	; 0x1000 <modf>
     e80:	e8 ec       	ldi	r30, 0xC8	; 200
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	16 d0       	rcall	.+44     	; 0xeb2 <__fp_powser>
     e86:	4f 91       	pop	r20
     e88:	5f 91       	pop	r21
     e8a:	ef 91       	pop	r30
     e8c:	ff 91       	pop	r31
     e8e:	e5 95       	asr	r30
     e90:	ee 1f       	adc	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	49 f0       	breq	.+18     	; 0xea8 <exp+0x4e>
     e96:	fe 57       	subi	r31, 0x7E	; 126
     e98:	e0 68       	ori	r30, 0x80	; 128
     e9a:	44 27       	eor	r20, r20
     e9c:	ee 0f       	add	r30, r30
     e9e:	44 1f       	adc	r20, r20
     ea0:	fa 95       	dec	r31
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <exp+0x42>
     ea4:	41 95       	neg	r20
     ea6:	55 0b       	sbc	r21, r21
     ea8:	32 d0       	rcall	.+100    	; 0xf0e <ldexp>
     eaa:	0f 90       	pop	r0
     eac:	07 fe       	sbrs	r0, 7
     eae:	26 c0       	rjmp	.+76     	; 0xefc <inverse>
     eb0:	08 95       	ret

00000eb2 <__fp_powser>:
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	1f 93       	push	r17
     eb8:	0f 93       	push	r16
     eba:	ff 92       	push	r15
     ebc:	ef 92       	push	r14
     ebe:	df 92       	push	r13
     ec0:	7b 01       	movw	r14, r22
     ec2:	8c 01       	movw	r16, r24
     ec4:	68 94       	set
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <__fp_powser+0x20>
     ec8:	da 2e       	mov	r13, r26
     eca:	ef 01       	movw	r28, r30
     ecc:	1e df       	rcall	.-452    	; 0xd0a <__mulsf3x>
     ece:	fe 01       	movw	r30, r28
     ed0:	e8 94       	clt
     ed2:	a5 91       	lpm	r26, Z+
     ed4:	25 91       	lpm	r18, Z+
     ed6:	35 91       	lpm	r19, Z+
     ed8:	45 91       	lpm	r20, Z+
     eda:	55 91       	lpm	r21, Z+
     edc:	ae f3       	brts	.-22     	; 0xec8 <__fp_powser+0x16>
     ede:	ef 01       	movw	r28, r30
     ee0:	8e dd       	rcall	.-1252   	; 0x9fe <__addsf3x>
     ee2:	fe 01       	movw	r30, r28
     ee4:	97 01       	movw	r18, r14
     ee6:	a8 01       	movw	r20, r16
     ee8:	da 94       	dec	r13
     eea:	79 f7       	brne	.-34     	; 0xeca <__fp_powser+0x18>
     eec:	df 90       	pop	r13
     eee:	ef 90       	pop	r14
     ef0:	ff 90       	pop	r15
     ef2:	0f 91       	pop	r16
     ef4:	1f 91       	pop	r17
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <inverse>:
     efc:	9b 01       	movw	r18, r22
     efe:	ac 01       	movw	r20, r24
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	80 e8       	ldi	r24, 0x80	; 128
     f06:	9f e3       	ldi	r25, 0x3F	; 63
     f08:	cd cd       	rjmp	.-1126   	; 0xaa4 <__divsf3>
     f0a:	a2 ce       	rjmp	.-700    	; 0xc50 <__fp_inf>
     f0c:	ac c0       	rjmp	.+344    	; 0x1066 <__fp_mpack>

00000f0e <ldexp>:
     f0e:	d0 de       	rcall	.-608    	; 0xcb0 <__fp_splitA>
     f10:	e8 f3       	brcs	.-6      	; 0xf0c <inverse+0x10>
     f12:	99 23       	and	r25, r25
     f14:	d9 f3       	breq	.-10     	; 0xf0c <inverse+0x10>
     f16:	94 0f       	add	r25, r20
     f18:	51 1d       	adc	r21, r1
     f1a:	bb f3       	brvs	.-18     	; 0xf0a <inverse+0xe>
     f1c:	91 50       	subi	r25, 0x01	; 1
     f1e:	50 40       	sbci	r21, 0x00	; 0
     f20:	94 f0       	brlt	.+36     	; 0xf46 <ldexp+0x38>
     f22:	59 f0       	breq	.+22     	; 0xf3a <ldexp+0x2c>
     f24:	88 23       	and	r24, r24
     f26:	32 f0       	brmi	.+12     	; 0xf34 <ldexp+0x26>
     f28:	66 0f       	add	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	88 1f       	adc	r24, r24
     f2e:	91 50       	subi	r25, 0x01	; 1
     f30:	50 40       	sbci	r21, 0x00	; 0
     f32:	c1 f7       	brne	.-16     	; 0xf24 <ldexp+0x16>
     f34:	9e 3f       	cpi	r25, 0xFE	; 254
     f36:	51 05       	cpc	r21, r1
     f38:	44 f7       	brge	.-48     	; 0xf0a <inverse+0xe>
     f3a:	88 0f       	add	r24, r24
     f3c:	91 1d       	adc	r25, r1
     f3e:	96 95       	lsr	r25
     f40:	87 95       	ror	r24
     f42:	97 f9       	bld	r25, 7
     f44:	08 95       	ret
     f46:	5f 3f       	cpi	r21, 0xFF	; 255
     f48:	ac f0       	brlt	.+42     	; 0xf74 <ldexp+0x66>
     f4a:	98 3e       	cpi	r25, 0xE8	; 232
     f4c:	9c f0       	brlt	.+38     	; 0xf74 <ldexp+0x66>
     f4e:	bb 27       	eor	r27, r27
     f50:	86 95       	lsr	r24
     f52:	77 95       	ror	r23
     f54:	67 95       	ror	r22
     f56:	b7 95       	ror	r27
     f58:	08 f4       	brcc	.+2      	; 0xf5c <ldexp+0x4e>
     f5a:	b1 60       	ori	r27, 0x01	; 1
     f5c:	93 95       	inc	r25
     f5e:	c1 f7       	brne	.-16     	; 0xf50 <ldexp+0x42>
     f60:	bb 0f       	add	r27, r27
     f62:	58 f7       	brcc	.-42     	; 0xf3a <ldexp+0x2c>
     f64:	11 f4       	brne	.+4      	; 0xf6a <ldexp+0x5c>
     f66:	60 ff       	sbrs	r22, 0
     f68:	e8 cf       	rjmp	.-48     	; 0xf3a <ldexp+0x2c>
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	8f 4f       	sbci	r24, 0xFF	; 255
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	e3 cf       	rjmp	.-58     	; 0xf3a <ldexp+0x2c>
     f74:	b8 ce       	rjmp	.-656    	; 0xce6 <__fp_szero>
     f76:	0e f0       	brts	.+2      	; 0xf7a <ldexp+0x6c>
     f78:	76 c0       	rjmp	.+236    	; 0x1066 <__fp_mpack>
     f7a:	70 ce       	rjmp	.-800    	; 0xc5c <__fp_nan>
     f7c:	68 94       	set
     f7e:	68 ce       	rjmp	.-816    	; 0xc50 <__fp_inf>

00000f80 <log>:
     f80:	97 de       	rcall	.-722    	; 0xcb0 <__fp_splitA>
     f82:	c8 f3       	brcs	.-14     	; 0xf76 <ldexp+0x68>
     f84:	99 23       	and	r25, r25
     f86:	d1 f3       	breq	.-12     	; 0xf7c <ldexp+0x6e>
     f88:	c6 f3       	brts	.-16     	; 0xf7a <ldexp+0x6c>
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	1f 93       	push	r17
     f90:	0f 93       	push	r16
     f92:	ff 92       	push	r15
     f94:	c9 2f       	mov	r28, r25
     f96:	dd 27       	eor	r29, r29
     f98:	88 23       	and	r24, r24
     f9a:	2a f0       	brmi	.+10     	; 0xfa6 <log+0x26>
     f9c:	21 97       	sbiw	r28, 0x01	; 1
     f9e:	66 0f       	add	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	da f7       	brpl	.-10     	; 0xf9c <log+0x1c>
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5f eb       	ldi	r21, 0xBF	; 191
     fae:	9f e3       	ldi	r25, 0x3F	; 63
     fb0:	88 39       	cpi	r24, 0x98	; 152
     fb2:	20 f0       	brcs	.+8      	; 0xfbc <log+0x3c>
     fb4:	80 3e       	cpi	r24, 0xE0	; 224
     fb6:	30 f0       	brcs	.+12     	; 0xfc4 <log+0x44>
     fb8:	21 96       	adiw	r28, 0x01	; 1
     fba:	8f 77       	andi	r24, 0x7F	; 127
     fbc:	0f dd       	rcall	.-1506   	; 0x9dc <__addsf3>
     fbe:	e0 ef       	ldi	r30, 0xF0	; 240
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <log+0x4a>
     fc4:	0b dd       	rcall	.-1514   	; 0x9dc <__addsf3>
     fc6:	ed e1       	ldi	r30, 0x1D	; 29
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
     fca:	73 df       	rcall	.-282    	; 0xeb2 <__fp_powser>
     fcc:	8b 01       	movw	r16, r22
     fce:	be 01       	movw	r22, r28
     fd0:	ec 01       	movw	r28, r24
     fd2:	fb 2e       	mov	r15, r27
     fd4:	6f 57       	subi	r22, 0x7F	; 127
     fd6:	71 09       	sbc	r23, r1
     fd8:	75 95       	asr	r23
     fda:	77 1f       	adc	r23, r23
     fdc:	88 0b       	sbc	r24, r24
     fde:	99 0b       	sbc	r25, r25
     fe0:	fc dd       	rcall	.-1032   	; 0xbda <__floatsisf>
     fe2:	28 e1       	ldi	r18, 0x18	; 24
     fe4:	32 e7       	ldi	r19, 0x72	; 114
     fe6:	41 e3       	ldi	r20, 0x31	; 49
     fe8:	5f e3       	ldi	r21, 0x3F	; 63
     fea:	8f de       	rcall	.-738    	; 0xd0a <__mulsf3x>
     fec:	af 2d       	mov	r26, r15
     fee:	98 01       	movw	r18, r16
     ff0:	ae 01       	movw	r20, r28
     ff2:	ff 90       	pop	r15
     ff4:	0f 91       	pop	r16
     ff6:	1f 91       	pop	r17
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	00 dd       	rcall	.-1536   	; 0x9fe <__addsf3x>
     ffe:	3f ce       	rjmp	.-898    	; 0xc7e <__fp_round>

00001000 <modf>:
    1000:	fa 01       	movw	r30, r20
    1002:	dc 01       	movw	r26, r24
    1004:	aa 0f       	add	r26, r26
    1006:	bb 1f       	adc	r27, r27
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	bf 57       	subi	r27, 0x7F	; 127
    100e:	28 f4       	brcc	.+10     	; 0x101a <modf+0x1a>
    1010:	22 27       	eor	r18, r18
    1012:	33 27       	eor	r19, r19
    1014:	44 27       	eor	r20, r20
    1016:	50 78       	andi	r21, 0x80	; 128
    1018:	1f c0       	rjmp	.+62     	; 0x1058 <modf+0x58>
    101a:	b7 51       	subi	r27, 0x17	; 23
    101c:	88 f4       	brcc	.+34     	; 0x1040 <modf+0x40>
    101e:	ab 2f       	mov	r26, r27
    1020:	00 24       	eor	r0, r0
    1022:	46 95       	lsr	r20
    1024:	37 95       	ror	r19
    1026:	27 95       	ror	r18
    1028:	01 1c       	adc	r0, r1
    102a:	a3 95       	inc	r26
    102c:	d2 f3       	brmi	.-12     	; 0x1022 <modf+0x22>
    102e:	00 20       	and	r0, r0
    1030:	69 f0       	breq	.+26     	; 0x104c <modf+0x4c>
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	44 1f       	adc	r20, r20
    1038:	b3 95       	inc	r27
    103a:	da f3       	brmi	.-10     	; 0x1032 <modf+0x32>
    103c:	0d d0       	rcall	.+26     	; 0x1058 <modf+0x58>
    103e:	cd cc       	rjmp	.-1638   	; 0x9da <__subsf3>
    1040:	61 30       	cpi	r22, 0x01	; 1
    1042:	71 05       	cpc	r23, r1
    1044:	a0 e8       	ldi	r26, 0x80	; 128
    1046:	8a 07       	cpc	r24, r26
    1048:	b9 46       	sbci	r27, 0x69	; 105
    104a:	30 f4       	brcc	.+12     	; 0x1058 <modf+0x58>
    104c:	9b 01       	movw	r18, r22
    104e:	ac 01       	movw	r20, r24
    1050:	66 27       	eor	r22, r22
    1052:	77 27       	eor	r23, r23
    1054:	88 27       	eor	r24, r24
    1056:	90 78       	andi	r25, 0x80	; 128
    1058:	30 96       	adiw	r30, 0x00	; 0
    105a:	21 f0       	breq	.+8      	; 0x1064 <modf+0x64>
    105c:	20 83       	st	Z, r18
    105e:	31 83       	std	Z+1, r19	; 0x01
    1060:	42 83       	std	Z+2, r20	; 0x02
    1062:	53 83       	std	Z+3, r21	; 0x03
    1064:	08 95       	ret

00001066 <__fp_mpack>:
    1066:	9f 3f       	cpi	r25, 0xFF	; 255
    1068:	31 f0       	breq	.+12     	; 0x1076 <__fp_mpack_finite+0xc>

0000106a <__fp_mpack_finite>:
    106a:	91 50       	subi	r25, 0x01	; 1
    106c:	20 f4       	brcc	.+8      	; 0x1076 <__fp_mpack_finite+0xc>
    106e:	87 95       	ror	r24
    1070:	77 95       	ror	r23
    1072:	67 95       	ror	r22
    1074:	b7 95       	ror	r27
    1076:	88 0f       	add	r24, r24
    1078:	91 1d       	adc	r25, r1
    107a:	96 95       	lsr	r25
    107c:	87 95       	ror	r24
    107e:	97 f9       	bld	r25, 7
    1080:	08 95       	ret

00001082 <__divmodhi4>:
    1082:	97 fb       	bst	r25, 7
    1084:	07 2e       	mov	r0, r23
    1086:	16 f4       	brtc	.+4      	; 0x108c <__divmodhi4+0xa>
    1088:	00 94       	com	r0
    108a:	06 d0       	rcall	.+12     	; 0x1098 <__divmodhi4_neg1>
    108c:	77 fd       	sbrc	r23, 7
    108e:	08 d0       	rcall	.+16     	; 0x10a0 <__divmodhi4_neg2>
    1090:	14 d0       	rcall	.+40     	; 0x10ba <__udivmodhi4>
    1092:	07 fc       	sbrc	r0, 7
    1094:	05 d0       	rcall	.+10     	; 0x10a0 <__divmodhi4_neg2>
    1096:	3e f4       	brtc	.+14     	; 0x10a6 <__divmodhi4_exit>

00001098 <__divmodhi4_neg1>:
    1098:	90 95       	com	r25
    109a:	81 95       	neg	r24
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	08 95       	ret

000010a0 <__divmodhi4_neg2>:
    10a0:	70 95       	com	r23
    10a2:	61 95       	neg	r22
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255

000010a6 <__divmodhi4_exit>:
    10a6:	08 95       	ret

000010a8 <__tablejump2__>:
    10a8:	ee 0f       	add	r30, r30
    10aa:	ff 1f       	adc	r31, r31
    10ac:	00 24       	eor	r0, r0
    10ae:	00 1c       	adc	r0, r0
    10b0:	0b be       	out	0x3b, r0	; 59
    10b2:	07 90       	elpm	r0, Z+
    10b4:	f6 91       	elpm	r31, Z
    10b6:	e0 2d       	mov	r30, r0
    10b8:	09 94       	ijmp

000010ba <__udivmodhi4>:
    10ba:	aa 1b       	sub	r26, r26
    10bc:	bb 1b       	sub	r27, r27
    10be:	51 e1       	ldi	r21, 0x11	; 17
    10c0:	07 c0       	rjmp	.+14     	; 0x10d0 <__udivmodhi4_ep>

000010c2 <__udivmodhi4_loop>:
    10c2:	aa 1f       	adc	r26, r26
    10c4:	bb 1f       	adc	r27, r27
    10c6:	a6 17       	cp	r26, r22
    10c8:	b7 07       	cpc	r27, r23
    10ca:	10 f0       	brcs	.+4      	; 0x10d0 <__udivmodhi4_ep>
    10cc:	a6 1b       	sub	r26, r22
    10ce:	b7 0b       	sbc	r27, r23

000010d0 <__udivmodhi4_ep>:
    10d0:	88 1f       	adc	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	5a 95       	dec	r21
    10d6:	a9 f7       	brne	.-22     	; 0x10c2 <__udivmodhi4_loop>
    10d8:	80 95       	com	r24
    10da:	90 95       	com	r25
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	08 95       	ret

000010e2 <_exit>:
    10e2:	f8 94       	cli

000010e4 <__stop_program>:
    10e4:	ff cf       	rjmp	.-2      	; 0x10e4 <__stop_program>
